// Version: 1.5
// Author: Martin Wistauder
// Date: 25.09.2022
//
// Server Address: gameserver.ist.tugraz.at
// Port:           80
syntax = "proto3";
package netcode;

import "nim.proto";
import "dots-and-boxes.proto";
import "dominect.proto";
import "dozo.proto";
import "tak.proto";

service GameCom {
	// Game-related
	rpc NewMatch (MatchRequest) returns (MatchResponse);
	rpc SubmitTurn (TurnRequest) returns (TurnResponse);
	rpc GetGameState (MatchIDPacket) returns (GameStateResponse);
	rpc GetTimeout (MatchIDPacket) returns (GetTimeoutResponse);
	rpc GetOpponentInfo(MatchIDPacket) returns (OpponentInfoResponse);
	rpc AbortMatch (MatchIDPacket) returns (Nothing); // Disabled
	rpc GetElo(IDPacket) returns (EloValues);

	// Organisation-related
	rpc UserRegistration (UserRegistrationRequest) returns (UserRegistrationResponse);
	rpc GroupRegistration (GroupRegistrationRequest) returns (GroupRegistrationResponse);
	rpc SetGroupPseudonym (SetPseudonymRequest) returns (SetPseudonymResponse);
	rpc SetUserPseudonym (SetPseudonymRequest) returns (SetPseudonymResponse);
	rpc GetUserToken (AuthPacket) returns (GetUserTokenResponse);
}

message AuthPacket {
	string matr_number = 1;
	string secret = 2;
}

message MatchIDPacket {
	string user_token = 1;
	string match_token = 2;
}

message IDPacket {
	string user_token = 1;
}

message GetTimeoutResponse {
	uint32 timeout_seconds = 1;
}

message SetPseudonymRequest {
	AuthPacket auth = 1;
	string pseudonym = 2;
}

message SetPseudonymResponse {
	enum ErrorCode {
		UNDEFINED_ERROR = 0;
		OK = 1;
		REQUEST_REJECTED = 2;
		ALREADY_USED = 3;
		TOO_LONG = 4;
		EMPTY_FIELDS = 5;
	}
	ErrorCode error_code = 1;
}

message GetUserTokenResponse {
	string user_token = 1;
}

message UserRegistrationRequest {
	string fullname = 1;
	string email = 2;
	string matr_number = 3;
	string secret = 4;
}

message UserRegistrationResponse {
	enum ErrorCode {
		UNDEFINED_ERROR = 0;
		OK = 1;
		INVALID_PARAMETER = 2;
		EMPTY_FIELDS = 3;
		NOT_ALLOWED = 4;
	}
	ErrorCode error_code = 1;
}

message GroupRegistrationRequest {
	AuthPacket auth = 1;
	repeated string matr_number = 2;
}

message GroupRegistrationResponse {
	enum ErrorCode {
		UNDEFINED_ERROR = 0;
		OK = 1;
		UNKNOWN_USER = 2;
		TOO_MANY_GROUP_MEMBERS = 3;
		USER_ALREADY_REGISTERED = 4;
		AUTH_FAILED = 5;
	}
	ErrorCode error_code = 1;
}

message DirectChallenge {
	string user_pseudonym = 1;
}

message MatchmakingParameter {
	oneof parameter {
		Nothing random_is_default = 10;
		DirectChallenge direct_matchmaking = 11;
	}
}

message MatchRequest {
	string user_token = 1;
	string game_token = 2;
	MatchmakingParameter matchmaking_parameters = 3;
	uint32 timeout_suggestion_seconds = 4;
	oneof game_parameters {
		nim.GameParameter nim_game_parameters = 10;
		dab.GameParameter dab_game_parameters = 11;
		dom.GameParameter dom_game_parameters = 12;
		dzo.GameParameter dzo_game_parameters = 13;
		tak.GameParameter tak_game_parameters = 14;
	}
}

message MatchResponse {
	string match_token = 1;
	bool beginning_player = 2;
}

message TurnRequest {
	MatchIDPacket match_id = 1;
	oneof game_turn {
		nim.GameTurn nim_game_turn = 10;
		dab.GameTurn dab_game_turn = 11;
		dom.GameTurn dom_game_turn = 12;
		dzo.GameTurn dzo_game_turn = 13;
		tak.GameTurn tak_game_turn = 14;
	}
}

enum TurnStatus {
	OK = 0;
	INVALID_TURN = 1;
	NOT_YOUR_TURN = 2;
	MATCH_OVER = 3;
}

message TurnResponse {
	TurnStatus turn_status = 1;
	oneof game_state {
		nim.GameState nim_game_state = 10;
		dab.GameState dab_game_state = 11;
		dom.GameState dom_game_state = 12;
		dzo.GameState dzo_game_state = 13;
		tak.GameState tak_game_state = 14;
	}
}

enum GameStatus {
	YOUR_TURN = 0;
	OPPONENTS_TURN = 1;
	MATCH_WON = 3;
	MATCH_LOST = 4;
	DRAW = 5;
	MATCH_NOT_STARTED = 6;
	MATCH_ABORTED = 7;
}

message GameStateResponse {
	GameStatus game_status = 1;
	bool beginning_player = 2;
	oneof game_state {
		nim.GameState nim_game_state = 10;
		dab.GameState dab_game_state = 11;
		dom.GameState dom_game_state = 12;
		dzo.GameState dzo_game_state = 13;
		tak.GameState tak_game_state = 14;
	}
}

message EloValues {
	double user_elo = 1;
	double group_elo = 2;
}

message OpponentInfoResponse {
	string user_pseudonym = 1;
	string group_pseudonym = 2;
	EloValues elo = 3;
}

message Nothing {
}