// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dozo.proto

package dzo;

public final class Dozo {
  private Dozo() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GameParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dzo.GameParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The length of one side of the triangular board.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     */
    int getBoardLength();

    /**
     * <pre>
     * The number of available colors.
     * </pre>
     *
     * <code>uint32 number_of_colors = 2;</code>
     */
    int getNumberOfColors();
  }
  /**
   * <pre>
   * The GameParameter packet defines the board length and number of colors used.
   * </pre>
   *
   * Protobuf type {@code dzo.GameParameter}
   */
  public  static final class GameParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dzo.GameParameter)
      GameParameterOrBuilder {
    // Use GameParameter.newBuilder() to construct.
    private GameParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GameParameter() {
      boardLength_ = 0;
      numberOfColors_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private GameParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              boardLength_ = input.readUInt32();
              break;
            }
            case 16: {

              numberOfColors_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dzo.Dozo.internal_static_dzo_GameParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dzo.Dozo.internal_static_dzo_GameParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dzo.Dozo.GameParameter.class, dzo.Dozo.GameParameter.Builder.class);
    }

    public static final int BOARD_LENGTH_FIELD_NUMBER = 1;
    private int boardLength_;
    /**
     * <pre>
     * The length of one side of the triangular board.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     */
    public int getBoardLength() {
      return boardLength_;
    }

    public static final int NUMBER_OF_COLORS_FIELD_NUMBER = 2;
    private int numberOfColors_;
    /**
     * <pre>
     * The number of available colors.
     * </pre>
     *
     * <code>uint32 number_of_colors = 2;</code>
     */
    public int getNumberOfColors() {
      return numberOfColors_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (boardLength_ != 0) {
        output.writeUInt32(1, boardLength_);
      }
      if (numberOfColors_ != 0) {
        output.writeUInt32(2, numberOfColors_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (boardLength_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, boardLength_);
      }
      if (numberOfColors_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, numberOfColors_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dzo.Dozo.GameParameter)) {
        return super.equals(obj);
      }
      dzo.Dozo.GameParameter other = (dzo.Dozo.GameParameter) obj;

      boolean result = true;
      result = result && (getBoardLength()
          == other.getBoardLength());
      result = result && (getNumberOfColors()
          == other.getNumberOfColors());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BOARD_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getBoardLength();
      hash = (37 * hash) + NUMBER_OF_COLORS_FIELD_NUMBER;
      hash = (53 * hash) + getNumberOfColors();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dzo.Dozo.GameParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dzo.Dozo.GameParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dzo.Dozo.GameParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The GameParameter packet defines the board length and number of colors used.
     * </pre>
     *
     * Protobuf type {@code dzo.GameParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dzo.GameParameter)
        dzo.Dozo.GameParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dzo.Dozo.internal_static_dzo_GameParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dzo.Dozo.internal_static_dzo_GameParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dzo.Dozo.GameParameter.class, dzo.Dozo.GameParameter.Builder.class);
      }

      // Construct using dzo.Dozo.GameParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        boardLength_ = 0;

        numberOfColors_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dzo.Dozo.internal_static_dzo_GameParameter_descriptor;
      }

      public dzo.Dozo.GameParameter getDefaultInstanceForType() {
        return dzo.Dozo.GameParameter.getDefaultInstance();
      }

      public dzo.Dozo.GameParameter build() {
        dzo.Dozo.GameParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dzo.Dozo.GameParameter buildPartial() {
        dzo.Dozo.GameParameter result = new dzo.Dozo.GameParameter(this);
        result.boardLength_ = boardLength_;
        result.numberOfColors_ = numberOfColors_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dzo.Dozo.GameParameter) {
          return mergeFrom((dzo.Dozo.GameParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dzo.Dozo.GameParameter other) {
        if (other == dzo.Dozo.GameParameter.getDefaultInstance()) return this;
        if (other.getBoardLength() != 0) {
          setBoardLength(other.getBoardLength());
        }
        if (other.getNumberOfColors() != 0) {
          setNumberOfColors(other.getNumberOfColors());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dzo.Dozo.GameParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dzo.Dozo.GameParameter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int boardLength_ ;
      /**
       * <pre>
       * The length of one side of the triangular board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       */
      public int getBoardLength() {
        return boardLength_;
      }
      /**
       * <pre>
       * The length of one side of the triangular board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       */
      public Builder setBoardLength(int value) {
        
        boardLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The length of one side of the triangular board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       */
      public Builder clearBoardLength() {
        
        boardLength_ = 0;
        onChanged();
        return this;
      }

      private int numberOfColors_ ;
      /**
       * <pre>
       * The number of available colors.
       * </pre>
       *
       * <code>uint32 number_of_colors = 2;</code>
       */
      public int getNumberOfColors() {
        return numberOfColors_;
      }
      /**
       * <pre>
       * The number of available colors.
       * </pre>
       *
       * <code>uint32 number_of_colors = 2;</code>
       */
      public Builder setNumberOfColors(int value) {
        
        numberOfColors_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of available colors.
       * </pre>
       *
       * <code>uint32 number_of_colors = 2;</code>
       */
      public Builder clearNumberOfColors() {
        
        numberOfColors_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dzo.GameParameter)
    }

    // @@protoc_insertion_point(class_scope:dzo.GameParameter)
    private static final dzo.Dozo.GameParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dzo.Dozo.GameParameter();
    }

    public static dzo.Dozo.GameParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameParameter>
        PARSER = new com.google.protobuf.AbstractParser<GameParameter>() {
      public GameParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new GameParameter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameParameter> getParserForType() {
      return PARSER;
    }

    public dzo.Dozo.GameParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameTurnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dzo.GameTurn)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Position, X-axis coordinate.
     * </pre>
     *
     * <code>uint32 x = 1;</code>
     */
    int getX();

    /**
     * <pre>
     * Position, Y-axis coordinate.
     * </pre>
     *
     * <code>uint32 y = 2;</code>
     */
    int getY();

    /**
     * <pre>
     * Color of the stone.
     * </pre>
     *
     * <code>uint32 color = 3;</code>
     */
    int getColor();
  }
  /**
   * <pre>
   * The GameTurn packet defines the position and color of the placed stone.
   * The first color is indexed 0.
   * The top of the triangular board is indexed (x|y) = (0|0).
   * Example:
   *        (0|0)
   *     (0|1),(1|1)
   *   (0|2),(1|2),(2|2)
   * (0|3),(1|3),(2|3),(3|3)
   * Hint: The indexing of the triangular board matches a 2d-array with some invalid fields.
   * </pre>
   *
   * Protobuf type {@code dzo.GameTurn}
   */
  public  static final class GameTurn extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dzo.GameTurn)
      GameTurnOrBuilder {
    // Use GameTurn.newBuilder() to construct.
    private GameTurn(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GameTurn() {
      x_ = 0;
      y_ = 0;
      color_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private GameTurn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              x_ = input.readUInt32();
              break;
            }
            case 16: {

              y_ = input.readUInt32();
              break;
            }
            case 24: {

              color_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dzo.Dozo.internal_static_dzo_GameTurn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dzo.Dozo.internal_static_dzo_GameTurn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dzo.Dozo.GameTurn.class, dzo.Dozo.GameTurn.Builder.class);
    }

    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <pre>
     * Position, X-axis coordinate.
     * </pre>
     *
     * <code>uint32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <pre>
     * Position, Y-axis coordinate.
     * </pre>
     *
     * <code>uint32 y = 2;</code>
     */
    public int getY() {
      return y_;
    }

    public static final int COLOR_FIELD_NUMBER = 3;
    private int color_;
    /**
     * <pre>
     * Color of the stone.
     * </pre>
     *
     * <code>uint32 color = 3;</code>
     */
    public int getColor() {
      return color_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (x_ != 0) {
        output.writeUInt32(1, x_);
      }
      if (y_ != 0) {
        output.writeUInt32(2, y_);
      }
      if (color_ != 0) {
        output.writeUInt32(3, color_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (x_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, x_);
      }
      if (y_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, y_);
      }
      if (color_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, color_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dzo.Dozo.GameTurn)) {
        return super.equals(obj);
      }
      dzo.Dozo.GameTurn other = (dzo.Dozo.GameTurn) obj;

      boolean result = true;
      result = result && (getX()
          == other.getX());
      result = result && (getY()
          == other.getY());
      result = result && (getColor()
          == other.getColor());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + getX();
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + getY();
      hash = (37 * hash) + COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getColor();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dzo.Dozo.GameTurn parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameTurn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameTurn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dzo.Dozo.GameTurn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameTurn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameTurn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dzo.Dozo.GameTurn prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The GameTurn packet defines the position and color of the placed stone.
     * The first color is indexed 0.
     * The top of the triangular board is indexed (x|y) = (0|0).
     * Example:
     *        (0|0)
     *     (0|1),(1|1)
     *   (0|2),(1|2),(2|2)
     * (0|3),(1|3),(2|3),(3|3)
     * Hint: The indexing of the triangular board matches a 2d-array with some invalid fields.
     * </pre>
     *
     * Protobuf type {@code dzo.GameTurn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dzo.GameTurn)
        dzo.Dozo.GameTurnOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dzo.Dozo.internal_static_dzo_GameTurn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dzo.Dozo.internal_static_dzo_GameTurn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dzo.Dozo.GameTurn.class, dzo.Dozo.GameTurn.Builder.class);
      }

      // Construct using dzo.Dozo.GameTurn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        x_ = 0;

        y_ = 0;

        color_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dzo.Dozo.internal_static_dzo_GameTurn_descriptor;
      }

      public dzo.Dozo.GameTurn getDefaultInstanceForType() {
        return dzo.Dozo.GameTurn.getDefaultInstance();
      }

      public dzo.Dozo.GameTurn build() {
        dzo.Dozo.GameTurn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dzo.Dozo.GameTurn buildPartial() {
        dzo.Dozo.GameTurn result = new dzo.Dozo.GameTurn(this);
        result.x_ = x_;
        result.y_ = y_;
        result.color_ = color_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dzo.Dozo.GameTurn) {
          return mergeFrom((dzo.Dozo.GameTurn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dzo.Dozo.GameTurn other) {
        if (other == dzo.Dozo.GameTurn.getDefaultInstance()) return this;
        if (other.getX() != 0) {
          setX(other.getX());
        }
        if (other.getY() != 0) {
          setY(other.getY());
        }
        if (other.getColor() != 0) {
          setColor(other.getColor());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dzo.Dozo.GameTurn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dzo.Dozo.GameTurn) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int x_ ;
      /**
       * <pre>
       * Position, X-axis coordinate.
       * </pre>
       *
       * <code>uint32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <pre>
       * Position, X-axis coordinate.
       * </pre>
       *
       * <code>uint32 x = 1;</code>
       */
      public Builder setX(int value) {
        
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position, X-axis coordinate.
       * </pre>
       *
       * <code>uint32 x = 1;</code>
       */
      public Builder clearX() {
        
        x_ = 0;
        onChanged();
        return this;
      }

      private int y_ ;
      /**
       * <pre>
       * Position, Y-axis coordinate.
       * </pre>
       *
       * <code>uint32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <pre>
       * Position, Y-axis coordinate.
       * </pre>
       *
       * <code>uint32 y = 2;</code>
       */
      public Builder setY(int value) {
        
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position, Y-axis coordinate.
       * </pre>
       *
       * <code>uint32 y = 2;</code>
       */
      public Builder clearY() {
        
        y_ = 0;
        onChanged();
        return this;
      }

      private int color_ ;
      /**
       * <pre>
       * Color of the stone.
       * </pre>
       *
       * <code>uint32 color = 3;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <pre>
       * Color of the stone.
       * </pre>
       *
       * <code>uint32 color = 3;</code>
       */
      public Builder setColor(int value) {
        
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Color of the stone.
       * </pre>
       *
       * <code>uint32 color = 3;</code>
       */
      public Builder clearColor() {
        
        color_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dzo.GameTurn)
    }

    // @@protoc_insertion_point(class_scope:dzo.GameTurn)
    private static final dzo.Dozo.GameTurn DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dzo.Dozo.GameTurn();
    }

    public static dzo.Dozo.GameTurn getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameTurn>
        PARSER = new com.google.protobuf.AbstractParser<GameTurn>() {
      public GameTurn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new GameTurn(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameTurn> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameTurn> getParserForType() {
      return PARSER;
    }

    public dzo.Dozo.GameTurn getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dzo.GameState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The length of one side of the triangular board.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     */
    int getBoardLength();

    /**
     * <pre>
     * The number of available colors.
     * </pre>
     *
     * <code>uint32 number_of_colors = 2;</code>
     */
    int getNumberOfColors();

    /**
     * <pre>
     * The board_data byte array contains only the triangular board.
     * Each byte contains the color of this position, or 0xFF if the position is unoccupied.
     * Example:
     *        (0|0)
     *     (0|1),(1|1)
     * board_data = { color(0|0), color(0|1), color(1|1) }
     * Hint: If you want to use a 2d-array for your client, here is an example of how to read the data nicely.
     *  for (size_t y = 0; y &lt; length; ++y)
     *  {
     *    for (size_t x = 0; x &lt;= y; ++x)
     *    {
     *      client_data[y][x] = gamestate_board_data[x + y * (y + 1) / 2];
     *    }
     *  }
     * </pre>
     *
     * <code>bytes board_data = 3;</code>
     */
    com.google.protobuf.ByteString getBoardData();

    /**
     * <pre>
     * The remaining stones for each color.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 4;</code>
     */
    java.util.List<java.lang.Integer> getRemainingStonesList();
    /**
     * <pre>
     * The remaining stones for each color.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 4;</code>
     */
    int getRemainingStonesCount();
    /**
     * <pre>
     * The remaining stones for each color.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 4;</code>
     */
    int getRemainingStones(int index);
  }
  /**
   * <pre>
   * The GameState packet defines the current board state of the match.
   * </pre>
   *
   * Protobuf type {@code dzo.GameState}
   */
  public  static final class GameState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dzo.GameState)
      GameStateOrBuilder {
    // Use GameState.newBuilder() to construct.
    private GameState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GameState() {
      boardLength_ = 0;
      numberOfColors_ = 0;
      boardData_ = com.google.protobuf.ByteString.EMPTY;
      remainingStones_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private GameState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              boardLength_ = input.readUInt32();
              break;
            }
            case 16: {

              numberOfColors_ = input.readUInt32();
              break;
            }
            case 26: {

              boardData_ = input.readBytes();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                remainingStones_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              remainingStones_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                remainingStones_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                remainingStones_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          remainingStones_ = java.util.Collections.unmodifiableList(remainingStones_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dzo.Dozo.internal_static_dzo_GameState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dzo.Dozo.internal_static_dzo_GameState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dzo.Dozo.GameState.class, dzo.Dozo.GameState.Builder.class);
    }

    private int bitField0_;
    public static final int BOARD_LENGTH_FIELD_NUMBER = 1;
    private int boardLength_;
    /**
     * <pre>
     * The length of one side of the triangular board.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     */
    public int getBoardLength() {
      return boardLength_;
    }

    public static final int NUMBER_OF_COLORS_FIELD_NUMBER = 2;
    private int numberOfColors_;
    /**
     * <pre>
     * The number of available colors.
     * </pre>
     *
     * <code>uint32 number_of_colors = 2;</code>
     */
    public int getNumberOfColors() {
      return numberOfColors_;
    }

    public static final int BOARD_DATA_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString boardData_;
    /**
     * <pre>
     * The board_data byte array contains only the triangular board.
     * Each byte contains the color of this position, or 0xFF if the position is unoccupied.
     * Example:
     *        (0|0)
     *     (0|1),(1|1)
     * board_data = { color(0|0), color(0|1), color(1|1) }
     * Hint: If you want to use a 2d-array for your client, here is an example of how to read the data nicely.
     *  for (size_t y = 0; y &lt; length; ++y)
     *  {
     *    for (size_t x = 0; x &lt;= y; ++x)
     *    {
     *      client_data[y][x] = gamestate_board_data[x + y * (y + 1) / 2];
     *    }
     *  }
     * </pre>
     *
     * <code>bytes board_data = 3;</code>
     */
    public com.google.protobuf.ByteString getBoardData() {
      return boardData_;
    }

    public static final int REMAINING_STONES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> remainingStones_;
    /**
     * <pre>
     * The remaining stones for each color.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getRemainingStonesList() {
      return remainingStones_;
    }
    /**
     * <pre>
     * The remaining stones for each color.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 4;</code>
     */
    public int getRemainingStonesCount() {
      return remainingStones_.size();
    }
    /**
     * <pre>
     * The remaining stones for each color.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 4;</code>
     */
    public int getRemainingStones(int index) {
      return remainingStones_.get(index);
    }
    private int remainingStonesMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (boardLength_ != 0) {
        output.writeUInt32(1, boardLength_);
      }
      if (numberOfColors_ != 0) {
        output.writeUInt32(2, numberOfColors_);
      }
      if (!boardData_.isEmpty()) {
        output.writeBytes(3, boardData_);
      }
      if (getRemainingStonesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(remainingStonesMemoizedSerializedSize);
      }
      for (int i = 0; i < remainingStones_.size(); i++) {
        output.writeUInt32NoTag(remainingStones_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (boardLength_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, boardLength_);
      }
      if (numberOfColors_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, numberOfColors_);
      }
      if (!boardData_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, boardData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < remainingStones_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(remainingStones_.get(i));
        }
        size += dataSize;
        if (!getRemainingStonesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        remainingStonesMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dzo.Dozo.GameState)) {
        return super.equals(obj);
      }
      dzo.Dozo.GameState other = (dzo.Dozo.GameState) obj;

      boolean result = true;
      result = result && (getBoardLength()
          == other.getBoardLength());
      result = result && (getNumberOfColors()
          == other.getNumberOfColors());
      result = result && getBoardData()
          .equals(other.getBoardData());
      result = result && getRemainingStonesList()
          .equals(other.getRemainingStonesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BOARD_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getBoardLength();
      hash = (37 * hash) + NUMBER_OF_COLORS_FIELD_NUMBER;
      hash = (53 * hash) + getNumberOfColors();
      hash = (37 * hash) + BOARD_DATA_FIELD_NUMBER;
      hash = (53 * hash) + getBoardData().hashCode();
      if (getRemainingStonesCount() > 0) {
        hash = (37 * hash) + REMAINING_STONES_FIELD_NUMBER;
        hash = (53 * hash) + getRemainingStonesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dzo.Dozo.GameState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dzo.Dozo.GameState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dzo.Dozo.GameState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dzo.Dozo.GameState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dzo.Dozo.GameState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dzo.Dozo.GameState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dzo.Dozo.GameState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The GameState packet defines the current board state of the match.
     * </pre>
     *
     * Protobuf type {@code dzo.GameState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dzo.GameState)
        dzo.Dozo.GameStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dzo.Dozo.internal_static_dzo_GameState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dzo.Dozo.internal_static_dzo_GameState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dzo.Dozo.GameState.class, dzo.Dozo.GameState.Builder.class);
      }

      // Construct using dzo.Dozo.GameState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        boardLength_ = 0;

        numberOfColors_ = 0;

        boardData_ = com.google.protobuf.ByteString.EMPTY;

        remainingStones_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dzo.Dozo.internal_static_dzo_GameState_descriptor;
      }

      public dzo.Dozo.GameState getDefaultInstanceForType() {
        return dzo.Dozo.GameState.getDefaultInstance();
      }

      public dzo.Dozo.GameState build() {
        dzo.Dozo.GameState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dzo.Dozo.GameState buildPartial() {
        dzo.Dozo.GameState result = new dzo.Dozo.GameState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.boardLength_ = boardLength_;
        result.numberOfColors_ = numberOfColors_;
        result.boardData_ = boardData_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          remainingStones_ = java.util.Collections.unmodifiableList(remainingStones_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.remainingStones_ = remainingStones_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dzo.Dozo.GameState) {
          return mergeFrom((dzo.Dozo.GameState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dzo.Dozo.GameState other) {
        if (other == dzo.Dozo.GameState.getDefaultInstance()) return this;
        if (other.getBoardLength() != 0) {
          setBoardLength(other.getBoardLength());
        }
        if (other.getNumberOfColors() != 0) {
          setNumberOfColors(other.getNumberOfColors());
        }
        if (other.getBoardData() != com.google.protobuf.ByteString.EMPTY) {
          setBoardData(other.getBoardData());
        }
        if (!other.remainingStones_.isEmpty()) {
          if (remainingStones_.isEmpty()) {
            remainingStones_ = other.remainingStones_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureRemainingStonesIsMutable();
            remainingStones_.addAll(other.remainingStones_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dzo.Dozo.GameState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dzo.Dozo.GameState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int boardLength_ ;
      /**
       * <pre>
       * The length of one side of the triangular board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       */
      public int getBoardLength() {
        return boardLength_;
      }
      /**
       * <pre>
       * The length of one side of the triangular board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       */
      public Builder setBoardLength(int value) {
        
        boardLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The length of one side of the triangular board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       */
      public Builder clearBoardLength() {
        
        boardLength_ = 0;
        onChanged();
        return this;
      }

      private int numberOfColors_ ;
      /**
       * <pre>
       * The number of available colors.
       * </pre>
       *
       * <code>uint32 number_of_colors = 2;</code>
       */
      public int getNumberOfColors() {
        return numberOfColors_;
      }
      /**
       * <pre>
       * The number of available colors.
       * </pre>
       *
       * <code>uint32 number_of_colors = 2;</code>
       */
      public Builder setNumberOfColors(int value) {
        
        numberOfColors_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of available colors.
       * </pre>
       *
       * <code>uint32 number_of_colors = 2;</code>
       */
      public Builder clearNumberOfColors() {
        
        numberOfColors_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString boardData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The board_data byte array contains only the triangular board.
       * Each byte contains the color of this position, or 0xFF if the position is unoccupied.
       * Example:
       *        (0|0)
       *     (0|1),(1|1)
       * board_data = { color(0|0), color(0|1), color(1|1) }
       * Hint: If you want to use a 2d-array for your client, here is an example of how to read the data nicely.
       *  for (size_t y = 0; y &lt; length; ++y)
       *  {
       *    for (size_t x = 0; x &lt;= y; ++x)
       *    {
       *      client_data[y][x] = gamestate_board_data[x + y * (y + 1) / 2];
       *    }
       *  }
       * </pre>
       *
       * <code>bytes board_data = 3;</code>
       */
      public com.google.protobuf.ByteString getBoardData() {
        return boardData_;
      }
      /**
       * <pre>
       * The board_data byte array contains only the triangular board.
       * Each byte contains the color of this position, or 0xFF if the position is unoccupied.
       * Example:
       *        (0|0)
       *     (0|1),(1|1)
       * board_data = { color(0|0), color(0|1), color(1|1) }
       * Hint: If you want to use a 2d-array for your client, here is an example of how to read the data nicely.
       *  for (size_t y = 0; y &lt; length; ++y)
       *  {
       *    for (size_t x = 0; x &lt;= y; ++x)
       *    {
       *      client_data[y][x] = gamestate_board_data[x + y * (y + 1) / 2];
       *    }
       *  }
       * </pre>
       *
       * <code>bytes board_data = 3;</code>
       */
      public Builder setBoardData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        boardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The board_data byte array contains only the triangular board.
       * Each byte contains the color of this position, or 0xFF if the position is unoccupied.
       * Example:
       *        (0|0)
       *     (0|1),(1|1)
       * board_data = { color(0|0), color(0|1), color(1|1) }
       * Hint: If you want to use a 2d-array for your client, here is an example of how to read the data nicely.
       *  for (size_t y = 0; y &lt; length; ++y)
       *  {
       *    for (size_t x = 0; x &lt;= y; ++x)
       *    {
       *      client_data[y][x] = gamestate_board_data[x + y * (y + 1) / 2];
       *    }
       *  }
       * </pre>
       *
       * <code>bytes board_data = 3;</code>
       */
      public Builder clearBoardData() {
        
        boardData_ = getDefaultInstance().getBoardData();
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> remainingStones_ = java.util.Collections.emptyList();
      private void ensureRemainingStonesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          remainingStones_ = new java.util.ArrayList<java.lang.Integer>(remainingStones_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getRemainingStonesList() {
        return java.util.Collections.unmodifiableList(remainingStones_);
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public int getRemainingStonesCount() {
        return remainingStones_.size();
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public int getRemainingStones(int index) {
        return remainingStones_.get(index);
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public Builder setRemainingStones(
          int index, int value) {
        ensureRemainingStonesIsMutable();
        remainingStones_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public Builder addRemainingStones(int value) {
        ensureRemainingStonesIsMutable();
        remainingStones_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public Builder addAllRemainingStones(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRemainingStonesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, remainingStones_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The remaining stones for each color.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 4;</code>
       */
      public Builder clearRemainingStones() {
        remainingStones_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dzo.GameState)
    }

    // @@protoc_insertion_point(class_scope:dzo.GameState)
    private static final dzo.Dozo.GameState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dzo.Dozo.GameState();
    }

    public static dzo.Dozo.GameState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameState>
        PARSER = new com.google.protobuf.AbstractParser<GameState>() {
      public GameState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new GameState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameState> getParserForType() {
      return PARSER;
    }

    public dzo.Dozo.GameState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dzo_GameParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dzo_GameParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dzo_GameTurn_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dzo_GameTurn_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dzo_GameState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dzo_GameState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ndozo.proto\022\003dzo\"?\n\rGameParameter\022\024\n\014bo" +
      "ard_length\030\001 \001(\r\022\030\n\020number_of_colors\030\002 \001" +
      "(\r\"/\n\010GameTurn\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\r\n\005" +
      "color\030\003 \001(\r\"i\n\tGameState\022\024\n\014board_length" +
      "\030\001 \001(\r\022\030\n\020number_of_colors\030\002 \001(\r\022\022\n\nboar" +
      "d_data\030\003 \001(\014\022\030\n\020remaining_stones\030\004 \003(\rb\006" +
      "proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_dzo_GameParameter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dzo_GameParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dzo_GameParameter_descriptor,
        new java.lang.String[] { "BoardLength", "NumberOfColors", });
    internal_static_dzo_GameTurn_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dzo_GameTurn_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dzo_GameTurn_descriptor,
        new java.lang.String[] { "X", "Y", "Color", });
    internal_static_dzo_GameState_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_dzo_GameState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dzo_GameState_descriptor,
        new java.lang.String[] { "BoardLength", "NumberOfColors", "BoardData", "RemainingStones", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
