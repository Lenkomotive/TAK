// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tak.proto

package tak;

public final class Tak {
  private Tak() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Direction translated to x/y axis direction.
   * </pre>
   *
   * Protobuf enum {@code tak.Direction}
   */
  public enum Direction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * -y direction
     * </pre>
     *
     * <code>NORTH = 0;</code>
     */
    NORTH(0),
    /**
     * <pre>
     * +x direction
     * </pre>
     *
     * <code>EAST = 1;</code>
     */
    EAST(1),
    /**
     * <pre>
     * +y direction
     * </pre>
     *
     * <code>SOUTH = 2;</code>
     */
    SOUTH(2),
    /**
     * <pre>
     * -x direction
     * </pre>
     *
     * <code>WEST = 3;</code>
     */
    WEST(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * -y direction
     * </pre>
     *
     * <code>NORTH = 0;</code>
     */
    public static final int NORTH_VALUE = 0;
    /**
     * <pre>
     * +x direction
     * </pre>
     *
     * <code>EAST = 1;</code>
     */
    public static final int EAST_VALUE = 1;
    /**
     * <pre>
     * +y direction
     * </pre>
     *
     * <code>SOUTH = 2;</code>
     */
    public static final int SOUTH_VALUE = 2;
    /**
     * <pre>
     * -x direction
     * </pre>
     *
     * <code>WEST = 3;</code>
     */
    public static final int WEST_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Direction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Direction forNumber(int value) {
      switch (value) {
        case 0: return NORTH;
        case 1: return EAST;
        case 2: return SOUTH;
        case 3: return WEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Direction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Direction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
            public Direction findValueByNumber(int number) {
              return Direction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return tak.Tak.getDescriptor().getEnumTypes().get(0);
    }

    private static final Direction[] VALUES = values();

    public static Direction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Direction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:tak.Direction)
  }

  /**
   * <pre>
   * Type of the stone to play.
   * </pre>
   *
   * Protobuf enum {@code tak.PieceType}
   */
  public enum PieceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FLAT_STONE = 0;</code>
     */
    FLAT_STONE(0),
    /**
     * <code>STANDING_STONE = 1;</code>
     */
    STANDING_STONE(1),
    /**
     * <code>CAPSTONE = 2;</code>
     */
    CAPSTONE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>FLAT_STONE = 0;</code>
     */
    public static final int FLAT_STONE_VALUE = 0;
    /**
     * <code>STANDING_STONE = 1;</code>
     */
    public static final int STANDING_STONE_VALUE = 1;
    /**
     * <code>CAPSTONE = 2;</code>
     */
    public static final int CAPSTONE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PieceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PieceType forNumber(int value) {
      switch (value) {
        case 0: return FLAT_STONE;
        case 1: return STANDING_STONE;
        case 2: return CAPSTONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PieceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PieceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PieceType>() {
            public PieceType findValueByNumber(int number) {
              return PieceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return tak.Tak.getDescriptor().getEnumTypes().get(1);
    }

    private static final PieceType[] VALUES = values();

    public static PieceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PieceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:tak.PieceType)
  }

  public interface GameParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.GameParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Board length of the quadratic game board.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     * @return The boardLength.
     */
    int getBoardLength();
  }
  /**
   * <pre>
   * The GameParameter packet defines the game-specific start settings.
   * </pre>
   *
   * Protobuf type {@code tak.GameParameter}
   */
  public static final class GameParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.GameParameter)
      GameParameterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GameParameter.newBuilder() to construct.
    private GameParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GameParameter() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GameParameter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GameParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              boardLength_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_GameParameter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_GameParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.GameParameter.class, tak.Tak.GameParameter.Builder.class);
    }

    public static final int BOARD_LENGTH_FIELD_NUMBER = 1;
    private int boardLength_;
    /**
     * <pre>
     * Board length of the quadratic game board.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     * @return The boardLength.
     */
    @java.lang.Override
    public int getBoardLength() {
      return boardLength_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (boardLength_ != 0) {
        output.writeUInt32(1, boardLength_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (boardLength_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, boardLength_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.GameParameter)) {
        return super.equals(obj);
      }
      tak.Tak.GameParameter other = (tak.Tak.GameParameter) obj;

      if (getBoardLength()
          != other.getBoardLength()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BOARD_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getBoardLength();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.GameParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.GameParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.GameParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.GameParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.GameParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.GameParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.GameParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The GameParameter packet defines the game-specific start settings.
     * </pre>
     *
     * Protobuf type {@code tak.GameParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.GameParameter)
        tak.Tak.GameParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_GameParameter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_GameParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.GameParameter.class, tak.Tak.GameParameter.Builder.class);
      }

      // Construct using tak.Tak.GameParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        boardLength_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_GameParameter_descriptor;
      }

      @java.lang.Override
      public tak.Tak.GameParameter getDefaultInstanceForType() {
        return tak.Tak.GameParameter.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.GameParameter build() {
        tak.Tak.GameParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.GameParameter buildPartial() {
        tak.Tak.GameParameter result = new tak.Tak.GameParameter(this);
        result.boardLength_ = boardLength_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.GameParameter) {
          return mergeFrom((tak.Tak.GameParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.GameParameter other) {
        if (other == tak.Tak.GameParameter.getDefaultInstance()) return this;
        if (other.getBoardLength() != 0) {
          setBoardLength(other.getBoardLength());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.GameParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.GameParameter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int boardLength_ ;
      /**
       * <pre>
       * Board length of the quadratic game board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       * @return The boardLength.
       */
      @java.lang.Override
      public int getBoardLength() {
        return boardLength_;
      }
      /**
       * <pre>
       * Board length of the quadratic game board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       * @param value The boardLength to set.
       * @return This builder for chaining.
       */
      public Builder setBoardLength(int value) {
        
        boardLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Board length of the quadratic game board.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoardLength() {
        
        boardLength_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.GameParameter)
    }

    // @@protoc_insertion_point(class_scope:tak.GameParameter)
    private static final tak.Tak.GameParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.GameParameter();
    }

    public static tak.Tak.GameParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameParameter>
        PARSER = new com.google.protobuf.AbstractParser<GameParameter>() {
      @java.lang.Override
      public GameParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameParameter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameParameter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.GameParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PlaceActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.PlaceAction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Stone/piece to play.
     * </pre>
     *
     * <code>.tak.PieceType piece = 1;</code>
     * @return The enum numeric value on the wire for piece.
     */
    int getPieceValue();
    /**
     * <pre>
     * Stone/piece to play.
     * </pre>
     *
     * <code>.tak.PieceType piece = 1;</code>
     * @return The piece.
     */
    tak.Tak.PieceType getPiece();
  }
  /**
   * <pre>
   * The player places a stone/piece.
   * </pre>
   *
   * Protobuf type {@code tak.PlaceAction}
   */
  public static final class PlaceAction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.PlaceAction)
      PlaceActionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PlaceAction.newBuilder() to construct.
    private PlaceAction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlaceAction() {
      piece_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PlaceAction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PlaceAction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              piece_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_PlaceAction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_PlaceAction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.PlaceAction.class, tak.Tak.PlaceAction.Builder.class);
    }

    public static final int PIECE_FIELD_NUMBER = 1;
    private int piece_;
    /**
     * <pre>
     * Stone/piece to play.
     * </pre>
     *
     * <code>.tak.PieceType piece = 1;</code>
     * @return The enum numeric value on the wire for piece.
     */
    @java.lang.Override public int getPieceValue() {
      return piece_;
    }
    /**
     * <pre>
     * Stone/piece to play.
     * </pre>
     *
     * <code>.tak.PieceType piece = 1;</code>
     * @return The piece.
     */
    @java.lang.Override public tak.Tak.PieceType getPiece() {
      @SuppressWarnings("deprecation")
      tak.Tak.PieceType result = tak.Tak.PieceType.valueOf(piece_);
      return result == null ? tak.Tak.PieceType.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (piece_ != tak.Tak.PieceType.FLAT_STONE.getNumber()) {
        output.writeEnum(1, piece_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (piece_ != tak.Tak.PieceType.FLAT_STONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, piece_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.PlaceAction)) {
        return super.equals(obj);
      }
      tak.Tak.PlaceAction other = (tak.Tak.PlaceAction) obj;

      if (piece_ != other.piece_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PIECE_FIELD_NUMBER;
      hash = (53 * hash) + piece_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.PlaceAction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.PlaceAction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.PlaceAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.PlaceAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.PlaceAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.PlaceAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.PlaceAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.PlaceAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.PlaceAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.PlaceAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.PlaceAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.PlaceAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.PlaceAction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The player places a stone/piece.
     * </pre>
     *
     * Protobuf type {@code tak.PlaceAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.PlaceAction)
        tak.Tak.PlaceActionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_PlaceAction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_PlaceAction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.PlaceAction.class, tak.Tak.PlaceAction.Builder.class);
      }

      // Construct using tak.Tak.PlaceAction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        piece_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_PlaceAction_descriptor;
      }

      @java.lang.Override
      public tak.Tak.PlaceAction getDefaultInstanceForType() {
        return tak.Tak.PlaceAction.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.PlaceAction build() {
        tak.Tak.PlaceAction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.PlaceAction buildPartial() {
        tak.Tak.PlaceAction result = new tak.Tak.PlaceAction(this);
        result.piece_ = piece_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.PlaceAction) {
          return mergeFrom((tak.Tak.PlaceAction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.PlaceAction other) {
        if (other == tak.Tak.PlaceAction.getDefaultInstance()) return this;
        if (other.piece_ != 0) {
          setPieceValue(other.getPieceValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.PlaceAction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.PlaceAction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int piece_ = 0;
      /**
       * <pre>
       * Stone/piece to play.
       * </pre>
       *
       * <code>.tak.PieceType piece = 1;</code>
       * @return The enum numeric value on the wire for piece.
       */
      @java.lang.Override public int getPieceValue() {
        return piece_;
      }
      /**
       * <pre>
       * Stone/piece to play.
       * </pre>
       *
       * <code>.tak.PieceType piece = 1;</code>
       * @param value The enum numeric value on the wire for piece to set.
       * @return This builder for chaining.
       */
      public Builder setPieceValue(int value) {
        
        piece_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stone/piece to play.
       * </pre>
       *
       * <code>.tak.PieceType piece = 1;</code>
       * @return The piece.
       */
      @java.lang.Override
      public tak.Tak.PieceType getPiece() {
        @SuppressWarnings("deprecation")
        tak.Tak.PieceType result = tak.Tak.PieceType.valueOf(piece_);
        return result == null ? tak.Tak.PieceType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Stone/piece to play.
       * </pre>
       *
       * <code>.tak.PieceType piece = 1;</code>
       * @param value The piece to set.
       * @return This builder for chaining.
       */
      public Builder setPiece(tak.Tak.PieceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        piece_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stone/piece to play.
       * </pre>
       *
       * <code>.tak.PieceType piece = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPiece() {
        
        piece_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.PlaceAction)
    }

    // @@protoc_insertion_point(class_scope:tak.PlaceAction)
    private static final tak.Tak.PlaceAction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.PlaceAction();
    }

    public static tak.Tak.PlaceAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PlaceAction>
        PARSER = new com.google.protobuf.AbstractParser<PlaceAction>() {
      @java.lang.Override
      public PlaceAction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlaceAction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PlaceAction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlaceAction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.PlaceAction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MoveActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.MoveAction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Direction to drop the stones.
     * </pre>
     *
     * <code>.tak.Direction direction = 1;</code>
     * @return The enum numeric value on the wire for direction.
     */
    int getDirectionValue();
    /**
     * <pre>
     * Direction to drop the stones.
     * </pre>
     *
     * <code>.tak.Direction direction = 1;</code>
     * @return The direction.
     */
    tak.Tak.Direction getDirection();

    /**
     * <pre>
     * List of stones to drop.
     * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
     * Lower indices are closer to the origin pile.
     * Example:
     *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
     *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
     *   Initial board (top left is (0|0)):
     *    --- --- --- --- --- ---
     *   |   | 6 |   |   |   |   |
     *    --- --- --- --- --- ---
     *   To achieve this move, a MoveAction has to look like this:
     *   - direction := EAST
     *   - drops := [1, 2, 3]
     *   The resulting board will look like this:
     *    --- --- --- --- --- ---
     *   |   |   | 1 | 2 | 3 |   |
     *    --- --- --- --- --- ---
     * </pre>
     *
     * <code>repeated uint32 drops = 2;</code>
     * @return A list containing the drops.
     */
    java.util.List<java.lang.Integer> getDropsList();
    /**
     * <pre>
     * List of stones to drop.
     * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
     * Lower indices are closer to the origin pile.
     * Example:
     *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
     *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
     *   Initial board (top left is (0|0)):
     *    --- --- --- --- --- ---
     *   |   | 6 |   |   |   |   |
     *    --- --- --- --- --- ---
     *   To achieve this move, a MoveAction has to look like this:
     *   - direction := EAST
     *   - drops := [1, 2, 3]
     *   The resulting board will look like this:
     *    --- --- --- --- --- ---
     *   |   |   | 1 | 2 | 3 |   |
     *    --- --- --- --- --- ---
     * </pre>
     *
     * <code>repeated uint32 drops = 2;</code>
     * @return The count of drops.
     */
    int getDropsCount();
    /**
     * <pre>
     * List of stones to drop.
     * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
     * Lower indices are closer to the origin pile.
     * Example:
     *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
     *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
     *   Initial board (top left is (0|0)):
     *    --- --- --- --- --- ---
     *   |   | 6 |   |   |   |   |
     *    --- --- --- --- --- ---
     *   To achieve this move, a MoveAction has to look like this:
     *   - direction := EAST
     *   - drops := [1, 2, 3]
     *   The resulting board will look like this:
     *    --- --- --- --- --- ---
     *   |   |   | 1 | 2 | 3 |   |
     *    --- --- --- --- --- ---
     * </pre>
     *
     * <code>repeated uint32 drops = 2;</code>
     * @param index The index of the element to return.
     * @return The drops at the given index.
     */
    int getDrops(int index);
  }
  /**
   * <pre>
   * The player moves a pile.
   * </pre>
   *
   * Protobuf type {@code tak.MoveAction}
   */
  public static final class MoveAction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.MoveAction)
      MoveActionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MoveAction.newBuilder() to construct.
    private MoveAction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MoveAction() {
      direction_ = 0;
      drops_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MoveAction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MoveAction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              direction_ = rawValue;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                drops_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              drops_.addInt(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                drops_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                drops_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          drops_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_MoveAction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_MoveAction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.MoveAction.class, tak.Tak.MoveAction.Builder.class);
    }

    public static final int DIRECTION_FIELD_NUMBER = 1;
    private int direction_;
    /**
     * <pre>
     * Direction to drop the stones.
     * </pre>
     *
     * <code>.tak.Direction direction = 1;</code>
     * @return The enum numeric value on the wire for direction.
     */
    @java.lang.Override public int getDirectionValue() {
      return direction_;
    }
    /**
     * <pre>
     * Direction to drop the stones.
     * </pre>
     *
     * <code>.tak.Direction direction = 1;</code>
     * @return The direction.
     */
    @java.lang.Override public tak.Tak.Direction getDirection() {
      @SuppressWarnings("deprecation")
      tak.Tak.Direction result = tak.Tak.Direction.valueOf(direction_);
      return result == null ? tak.Tak.Direction.UNRECOGNIZED : result;
    }

    public static final int DROPS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.IntList drops_;
    /**
     * <pre>
     * List of stones to drop.
     * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
     * Lower indices are closer to the origin pile.
     * Example:
     *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
     *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
     *   Initial board (top left is (0|0)):
     *    --- --- --- --- --- ---
     *   |   | 6 |   |   |   |   |
     *    --- --- --- --- --- ---
     *   To achieve this move, a MoveAction has to look like this:
     *   - direction := EAST
     *   - drops := [1, 2, 3]
     *   The resulting board will look like this:
     *    --- --- --- --- --- ---
     *   |   |   | 1 | 2 | 3 |   |
     *    --- --- --- --- --- ---
     * </pre>
     *
     * <code>repeated uint32 drops = 2;</code>
     * @return A list containing the drops.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDropsList() {
      return drops_;
    }
    /**
     * <pre>
     * List of stones to drop.
     * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
     * Lower indices are closer to the origin pile.
     * Example:
     *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
     *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
     *   Initial board (top left is (0|0)):
     *    --- --- --- --- --- ---
     *   |   | 6 |   |   |   |   |
     *    --- --- --- --- --- ---
     *   To achieve this move, a MoveAction has to look like this:
     *   - direction := EAST
     *   - drops := [1, 2, 3]
     *   The resulting board will look like this:
     *    --- --- --- --- --- ---
     *   |   |   | 1 | 2 | 3 |   |
     *    --- --- --- --- --- ---
     * </pre>
     *
     * <code>repeated uint32 drops = 2;</code>
     * @return The count of drops.
     */
    public int getDropsCount() {
      return drops_.size();
    }
    /**
     * <pre>
     * List of stones to drop.
     * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
     * Lower indices are closer to the origin pile.
     * Example:
     *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
     *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
     *   Initial board (top left is (0|0)):
     *    --- --- --- --- --- ---
     *   |   | 6 |   |   |   |   |
     *    --- --- --- --- --- ---
     *   To achieve this move, a MoveAction has to look like this:
     *   - direction := EAST
     *   - drops := [1, 2, 3]
     *   The resulting board will look like this:
     *    --- --- --- --- --- ---
     *   |   |   | 1 | 2 | 3 |   |
     *    --- --- --- --- --- ---
     * </pre>
     *
     * <code>repeated uint32 drops = 2;</code>
     * @param index The index of the element to return.
     * @return The drops at the given index.
     */
    public int getDrops(int index) {
      return drops_.getInt(index);
    }
    private int dropsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (direction_ != tak.Tak.Direction.NORTH.getNumber()) {
        output.writeEnum(1, direction_);
      }
      if (getDropsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(dropsMemoizedSerializedSize);
      }
      for (int i = 0; i < drops_.size(); i++) {
        output.writeUInt32NoTag(drops_.getInt(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (direction_ != tak.Tak.Direction.NORTH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, direction_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < drops_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(drops_.getInt(i));
        }
        size += dataSize;
        if (!getDropsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dropsMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.MoveAction)) {
        return super.equals(obj);
      }
      tak.Tak.MoveAction other = (tak.Tak.MoveAction) obj;

      if (direction_ != other.direction_) return false;
      if (!getDropsList()
          .equals(other.getDropsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
      hash = (53 * hash) + direction_;
      if (getDropsCount() > 0) {
        hash = (37 * hash) + DROPS_FIELD_NUMBER;
        hash = (53 * hash) + getDropsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.MoveAction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.MoveAction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.MoveAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.MoveAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.MoveAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.MoveAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.MoveAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.MoveAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.MoveAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.MoveAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.MoveAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.MoveAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.MoveAction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The player moves a pile.
     * </pre>
     *
     * Protobuf type {@code tak.MoveAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.MoveAction)
        tak.Tak.MoveActionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_MoveAction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_MoveAction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.MoveAction.class, tak.Tak.MoveAction.Builder.class);
      }

      // Construct using tak.Tak.MoveAction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        direction_ = 0;

        drops_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_MoveAction_descriptor;
      }

      @java.lang.Override
      public tak.Tak.MoveAction getDefaultInstanceForType() {
        return tak.Tak.MoveAction.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.MoveAction build() {
        tak.Tak.MoveAction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.MoveAction buildPartial() {
        tak.Tak.MoveAction result = new tak.Tak.MoveAction(this);
        int from_bitField0_ = bitField0_;
        result.direction_ = direction_;
        if (((bitField0_ & 0x00000001) != 0)) {
          drops_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.drops_ = drops_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.MoveAction) {
          return mergeFrom((tak.Tak.MoveAction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.MoveAction other) {
        if (other == tak.Tak.MoveAction.getDefaultInstance()) return this;
        if (other.direction_ != 0) {
          setDirectionValue(other.getDirectionValue());
        }
        if (!other.drops_.isEmpty()) {
          if (drops_.isEmpty()) {
            drops_ = other.drops_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDropsIsMutable();
            drops_.addAll(other.drops_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.MoveAction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.MoveAction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int direction_ = 0;
      /**
       * <pre>
       * Direction to drop the stones.
       * </pre>
       *
       * <code>.tak.Direction direction = 1;</code>
       * @return The enum numeric value on the wire for direction.
       */
      @java.lang.Override public int getDirectionValue() {
        return direction_;
      }
      /**
       * <pre>
       * Direction to drop the stones.
       * </pre>
       *
       * <code>.tak.Direction direction = 1;</code>
       * @param value The enum numeric value on the wire for direction to set.
       * @return This builder for chaining.
       */
      public Builder setDirectionValue(int value) {
        
        direction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Direction to drop the stones.
       * </pre>
       *
       * <code>.tak.Direction direction = 1;</code>
       * @return The direction.
       */
      @java.lang.Override
      public tak.Tak.Direction getDirection() {
        @SuppressWarnings("deprecation")
        tak.Tak.Direction result = tak.Tak.Direction.valueOf(direction_);
        return result == null ? tak.Tak.Direction.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Direction to drop the stones.
       * </pre>
       *
       * <code>.tak.Direction direction = 1;</code>
       * @param value The direction to set.
       * @return This builder for chaining.
       */
      public Builder setDirection(tak.Tak.Direction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        direction_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Direction to drop the stones.
       * </pre>
       *
       * <code>.tak.Direction direction = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDirection() {
        
        direction_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList drops_ = emptyIntList();
      private void ensureDropsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          drops_ = mutableCopy(drops_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @return A list containing the drops.
       */
      public java.util.List<java.lang.Integer>
          getDropsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(drops_) : drops_;
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @return The count of drops.
       */
      public int getDropsCount() {
        return drops_.size();
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @param index The index of the element to return.
       * @return The drops at the given index.
       */
      public int getDrops(int index) {
        return drops_.getInt(index);
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @param index The index to set the value at.
       * @param value The drops to set.
       * @return This builder for chaining.
       */
      public Builder setDrops(
          int index, int value) {
        ensureDropsIsMutable();
        drops_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @param value The drops to add.
       * @return This builder for chaining.
       */
      public Builder addDrops(int value) {
        ensureDropsIsMutable();
        drops_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @param values The drops to add.
       * @return This builder for chaining.
       */
      public Builder addAllDrops(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDropsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, drops_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of stones to drop.
       * Stones are removed from the origin pile at (x|y) and dropped in the given direction.
       * Lower indices are closer to the origin pile.
       * Example:
       *   Lets assume we have a 6x1 snippet of the board (n=6), with 6 flat stones of player 1 on position (1|0).
       *   We want to drop 1 flat stone at position (2|0), 2 flat stones at (3|0) and 3 flat stones at (4|0).
       *   Initial board (top left is (0|0)):
       *    --- --- --- --- --- ---
       *   |   | 6 |   |   |   |   |
       *    --- --- --- --- --- ---
       *   To achieve this move, a MoveAction has to look like this:
       *   - direction := EAST
       *   - drops := [1, 2, 3]
       *   The resulting board will look like this:
       *    --- --- --- --- --- ---
       *   |   |   | 1 | 2 | 3 |   |
       *    --- --- --- --- --- ---
       * </pre>
       *
       * <code>repeated uint32 drops = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDrops() {
        drops_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.MoveAction)
    }

    // @@protoc_insertion_point(class_scope:tak.MoveAction)
    private static final tak.Tak.MoveAction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.MoveAction();
    }

    public static tak.Tak.MoveAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MoveAction>
        PARSER = new com.google.protobuf.AbstractParser<MoveAction>() {
      @java.lang.Override
      public MoveAction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MoveAction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MoveAction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MoveAction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.MoveAction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameTurnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.GameTurn)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Position, X-axis coordinate.
     * </pre>
     *
     * <code>uint32 x = 1;</code>
     * @return The x.
     */
    int getX();

    /**
     * <pre>
     * Position, Y-axis coordinate.
     * </pre>
     *
     * <code>uint32 y = 2;</code>
     * @return The y.
     */
    int getY();

    /**
     * <pre>
     * Either place a stone ...
     * </pre>
     *
     * <code>.tak.PlaceAction place = 3;</code>
     * @return Whether the place field is set.
     */
    boolean hasPlace();
    /**
     * <pre>
     * Either place a stone ...
     * </pre>
     *
     * <code>.tak.PlaceAction place = 3;</code>
     * @return The place.
     */
    tak.Tak.PlaceAction getPlace();
    /**
     * <pre>
     * Either place a stone ...
     * </pre>
     *
     * <code>.tak.PlaceAction place = 3;</code>
     */
    tak.Tak.PlaceActionOrBuilder getPlaceOrBuilder();

    /**
     * <pre>
     * ... or move a pile.
     * </pre>
     *
     * <code>.tak.MoveAction move = 4;</code>
     * @return Whether the move field is set.
     */
    boolean hasMove();
    /**
     * <pre>
     * ... or move a pile.
     * </pre>
     *
     * <code>.tak.MoveAction move = 4;</code>
     * @return The move.
     */
    tak.Tak.MoveAction getMove();
    /**
     * <pre>
     * ... or move a pile.
     * </pre>
     *
     * <code>.tak.MoveAction move = 4;</code>
     */
    tak.Tak.MoveActionOrBuilder getMoveOrBuilder();

    public tak.Tak.GameTurn.ActionCase getActionCase();
  }
  /**
   * <pre>
   * The GameTurn packet defines the players action for this turn.
   * </pre>
   *
   * Protobuf type {@code tak.GameTurn}
   */
  public static final class GameTurn extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.GameTurn)
      GameTurnOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GameTurn.newBuilder() to construct.
    private GameTurn(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GameTurn() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GameTurn();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GameTurn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              x_ = input.readUInt32();
              break;
            }
            case 16: {

              y_ = input.readUInt32();
              break;
            }
            case 26: {
              tak.Tak.PlaceAction.Builder subBuilder = null;
              if (actionCase_ == 3) {
                subBuilder = ((tak.Tak.PlaceAction) action_).toBuilder();
              }
              action_ =
                  input.readMessage(tak.Tak.PlaceAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((tak.Tak.PlaceAction) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 3;
              break;
            }
            case 34: {
              tak.Tak.MoveAction.Builder subBuilder = null;
              if (actionCase_ == 4) {
                subBuilder = ((tak.Tak.MoveAction) action_).toBuilder();
              }
              action_ =
                  input.readMessage(tak.Tak.MoveAction.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((tak.Tak.MoveAction) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_GameTurn_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_GameTurn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.GameTurn.class, tak.Tak.GameTurn.Builder.class);
    }

    private int actionCase_ = 0;
    private java.lang.Object action_;
    public enum ActionCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PLACE(3),
      MOVE(4),
      ACTION_NOT_SET(0);
      private final int value;
      private ActionCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ActionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ActionCase forNumber(int value) {
        switch (value) {
          case 3: return PLACE;
          case 4: return MOVE;
          case 0: return ACTION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ActionCase
    getActionCase() {
      return ActionCase.forNumber(
          actionCase_);
    }

    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <pre>
     * Position, X-axis coordinate.
     * </pre>
     *
     * <code>uint32 x = 1;</code>
     * @return The x.
     */
    @java.lang.Override
    public int getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <pre>
     * Position, Y-axis coordinate.
     * </pre>
     *
     * <code>uint32 y = 2;</code>
     * @return The y.
     */
    @java.lang.Override
    public int getY() {
      return y_;
    }

    public static final int PLACE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Either place a stone ...
     * </pre>
     *
     * <code>.tak.PlaceAction place = 3;</code>
     * @return Whether the place field is set.
     */
    @java.lang.Override
    public boolean hasPlace() {
      return actionCase_ == 3;
    }
    /**
     * <pre>
     * Either place a stone ...
     * </pre>
     *
     * <code>.tak.PlaceAction place = 3;</code>
     * @return The place.
     */
    @java.lang.Override
    public tak.Tak.PlaceAction getPlace() {
      if (actionCase_ == 3) {
         return (tak.Tak.PlaceAction) action_;
      }
      return tak.Tak.PlaceAction.getDefaultInstance();
    }
    /**
     * <pre>
     * Either place a stone ...
     * </pre>
     *
     * <code>.tak.PlaceAction place = 3;</code>
     */
    @java.lang.Override
    public tak.Tak.PlaceActionOrBuilder getPlaceOrBuilder() {
      if (actionCase_ == 3) {
         return (tak.Tak.PlaceAction) action_;
      }
      return tak.Tak.PlaceAction.getDefaultInstance();
    }

    public static final int MOVE_FIELD_NUMBER = 4;
    /**
     * <pre>
     * ... or move a pile.
     * </pre>
     *
     * <code>.tak.MoveAction move = 4;</code>
     * @return Whether the move field is set.
     */
    @java.lang.Override
    public boolean hasMove() {
      return actionCase_ == 4;
    }
    /**
     * <pre>
     * ... or move a pile.
     * </pre>
     *
     * <code>.tak.MoveAction move = 4;</code>
     * @return The move.
     */
    @java.lang.Override
    public tak.Tak.MoveAction getMove() {
      if (actionCase_ == 4) {
         return (tak.Tak.MoveAction) action_;
      }
      return tak.Tak.MoveAction.getDefaultInstance();
    }
    /**
     * <pre>
     * ... or move a pile.
     * </pre>
     *
     * <code>.tak.MoveAction move = 4;</code>
     */
    @java.lang.Override
    public tak.Tak.MoveActionOrBuilder getMoveOrBuilder() {
      if (actionCase_ == 4) {
         return (tak.Tak.MoveAction) action_;
      }
      return tak.Tak.MoveAction.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (x_ != 0) {
        output.writeUInt32(1, x_);
      }
      if (y_ != 0) {
        output.writeUInt32(2, y_);
      }
      if (actionCase_ == 3) {
        output.writeMessage(3, (tak.Tak.PlaceAction) action_);
      }
      if (actionCase_ == 4) {
        output.writeMessage(4, (tak.Tak.MoveAction) action_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (x_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, x_);
      }
      if (y_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, y_);
      }
      if (actionCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (tak.Tak.PlaceAction) action_);
      }
      if (actionCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (tak.Tak.MoveAction) action_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.GameTurn)) {
        return super.equals(obj);
      }
      tak.Tak.GameTurn other = (tak.Tak.GameTurn) obj;

      if (getX()
          != other.getX()) return false;
      if (getY()
          != other.getY()) return false;
      if (!getActionCase().equals(other.getActionCase())) return false;
      switch (actionCase_) {
        case 3:
          if (!getPlace()
              .equals(other.getPlace())) return false;
          break;
        case 4:
          if (!getMove()
              .equals(other.getMove())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + getX();
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + getY();
      switch (actionCase_) {
        case 3:
          hash = (37 * hash) + PLACE_FIELD_NUMBER;
          hash = (53 * hash) + getPlace().hashCode();
          break;
        case 4:
          hash = (37 * hash) + MOVE_FIELD_NUMBER;
          hash = (53 * hash) + getMove().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.GameTurn parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameTurn parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameTurn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameTurn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameTurn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameTurn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameTurn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.GameTurn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.GameTurn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.GameTurn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.GameTurn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.GameTurn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.GameTurn prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The GameTurn packet defines the players action for this turn.
     * </pre>
     *
     * Protobuf type {@code tak.GameTurn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.GameTurn)
        tak.Tak.GameTurnOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_GameTurn_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_GameTurn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.GameTurn.class, tak.Tak.GameTurn.Builder.class);
      }

      // Construct using tak.Tak.GameTurn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        x_ = 0;

        y_ = 0;

        actionCase_ = 0;
        action_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_GameTurn_descriptor;
      }

      @java.lang.Override
      public tak.Tak.GameTurn getDefaultInstanceForType() {
        return tak.Tak.GameTurn.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.GameTurn build() {
        tak.Tak.GameTurn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.GameTurn buildPartial() {
        tak.Tak.GameTurn result = new tak.Tak.GameTurn(this);
        result.x_ = x_;
        result.y_ = y_;
        if (actionCase_ == 3) {
          if (placeBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = placeBuilder_.build();
          }
        }
        if (actionCase_ == 4) {
          if (moveBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = moveBuilder_.build();
          }
        }
        result.actionCase_ = actionCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.GameTurn) {
          return mergeFrom((tak.Tak.GameTurn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.GameTurn other) {
        if (other == tak.Tak.GameTurn.getDefaultInstance()) return this;
        if (other.getX() != 0) {
          setX(other.getX());
        }
        if (other.getY() != 0) {
          setY(other.getY());
        }
        switch (other.getActionCase()) {
          case PLACE: {
            mergePlace(other.getPlace());
            break;
          }
          case MOVE: {
            mergeMove(other.getMove());
            break;
          }
          case ACTION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.GameTurn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.GameTurn) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int actionCase_ = 0;
      private java.lang.Object action_;
      public ActionCase
          getActionCase() {
        return ActionCase.forNumber(
            actionCase_);
      }

      public Builder clearAction() {
        actionCase_ = 0;
        action_ = null;
        onChanged();
        return this;
      }


      private int x_ ;
      /**
       * <pre>
       * Position, X-axis coordinate.
       * </pre>
       *
       * <code>uint32 x = 1;</code>
       * @return The x.
       */
      @java.lang.Override
      public int getX() {
        return x_;
      }
      /**
       * <pre>
       * Position, X-axis coordinate.
       * </pre>
       *
       * <code>uint32 x = 1;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(int value) {
        
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position, X-axis coordinate.
       * </pre>
       *
       * <code>uint32 x = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        
        x_ = 0;
        onChanged();
        return this;
      }

      private int y_ ;
      /**
       * <pre>
       * Position, Y-axis coordinate.
       * </pre>
       *
       * <code>uint32 y = 2;</code>
       * @return The y.
       */
      @java.lang.Override
      public int getY() {
        return y_;
      }
      /**
       * <pre>
       * Position, Y-axis coordinate.
       * </pre>
       *
       * <code>uint32 y = 2;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(int value) {
        
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position, Y-axis coordinate.
       * </pre>
       *
       * <code>uint32 y = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        
        y_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          tak.Tak.PlaceAction, tak.Tak.PlaceAction.Builder, tak.Tak.PlaceActionOrBuilder> placeBuilder_;
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       * @return Whether the place field is set.
       */
      @java.lang.Override
      public boolean hasPlace() {
        return actionCase_ == 3;
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       * @return The place.
       */
      @java.lang.Override
      public tak.Tak.PlaceAction getPlace() {
        if (placeBuilder_ == null) {
          if (actionCase_ == 3) {
            return (tak.Tak.PlaceAction) action_;
          }
          return tak.Tak.PlaceAction.getDefaultInstance();
        } else {
          if (actionCase_ == 3) {
            return placeBuilder_.getMessage();
          }
          return tak.Tak.PlaceAction.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      public Builder setPlace(tak.Tak.PlaceAction value) {
        if (placeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          placeBuilder_.setMessage(value);
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      public Builder setPlace(
          tak.Tak.PlaceAction.Builder builderForValue) {
        if (placeBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          placeBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      public Builder mergePlace(tak.Tak.PlaceAction value) {
        if (placeBuilder_ == null) {
          if (actionCase_ == 3 &&
              action_ != tak.Tak.PlaceAction.getDefaultInstance()) {
            action_ = tak.Tak.PlaceAction.newBuilder((tak.Tak.PlaceAction) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 3) {
            placeBuilder_.mergeFrom(value);
          }
          placeBuilder_.setMessage(value);
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      public Builder clearPlace() {
        if (placeBuilder_ == null) {
          if (actionCase_ == 3) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 3) {
            actionCase_ = 0;
            action_ = null;
          }
          placeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      public tak.Tak.PlaceAction.Builder getPlaceBuilder() {
        return getPlaceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      @java.lang.Override
      public tak.Tak.PlaceActionOrBuilder getPlaceOrBuilder() {
        if ((actionCase_ == 3) && (placeBuilder_ != null)) {
          return placeBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 3) {
            return (tak.Tak.PlaceAction) action_;
          }
          return tak.Tak.PlaceAction.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Either place a stone ...
       * </pre>
       *
       * <code>.tak.PlaceAction place = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          tak.Tak.PlaceAction, tak.Tak.PlaceAction.Builder, tak.Tak.PlaceActionOrBuilder> 
          getPlaceFieldBuilder() {
        if (placeBuilder_ == null) {
          if (!(actionCase_ == 3)) {
            action_ = tak.Tak.PlaceAction.getDefaultInstance();
          }
          placeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              tak.Tak.PlaceAction, tak.Tak.PlaceAction.Builder, tak.Tak.PlaceActionOrBuilder>(
                  (tak.Tak.PlaceAction) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 3;
        onChanged();;
        return placeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          tak.Tak.MoveAction, tak.Tak.MoveAction.Builder, tak.Tak.MoveActionOrBuilder> moveBuilder_;
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       * @return Whether the move field is set.
       */
      @java.lang.Override
      public boolean hasMove() {
        return actionCase_ == 4;
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       * @return The move.
       */
      @java.lang.Override
      public tak.Tak.MoveAction getMove() {
        if (moveBuilder_ == null) {
          if (actionCase_ == 4) {
            return (tak.Tak.MoveAction) action_;
          }
          return tak.Tak.MoveAction.getDefaultInstance();
        } else {
          if (actionCase_ == 4) {
            return moveBuilder_.getMessage();
          }
          return tak.Tak.MoveAction.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      public Builder setMove(tak.Tak.MoveAction value) {
        if (moveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          moveBuilder_.setMessage(value);
        }
        actionCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      public Builder setMove(
          tak.Tak.MoveAction.Builder builderForValue) {
        if (moveBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          moveBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      public Builder mergeMove(tak.Tak.MoveAction value) {
        if (moveBuilder_ == null) {
          if (actionCase_ == 4 &&
              action_ != tak.Tak.MoveAction.getDefaultInstance()) {
            action_ = tak.Tak.MoveAction.newBuilder((tak.Tak.MoveAction) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 4) {
            moveBuilder_.mergeFrom(value);
          }
          moveBuilder_.setMessage(value);
        }
        actionCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      public Builder clearMove() {
        if (moveBuilder_ == null) {
          if (actionCase_ == 4) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 4) {
            actionCase_ = 0;
            action_ = null;
          }
          moveBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      public tak.Tak.MoveAction.Builder getMoveBuilder() {
        return getMoveFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      @java.lang.Override
      public tak.Tak.MoveActionOrBuilder getMoveOrBuilder() {
        if ((actionCase_ == 4) && (moveBuilder_ != null)) {
          return moveBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 4) {
            return (tak.Tak.MoveAction) action_;
          }
          return tak.Tak.MoveAction.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * ... or move a pile.
       * </pre>
       *
       * <code>.tak.MoveAction move = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          tak.Tak.MoveAction, tak.Tak.MoveAction.Builder, tak.Tak.MoveActionOrBuilder> 
          getMoveFieldBuilder() {
        if (moveBuilder_ == null) {
          if (!(actionCase_ == 4)) {
            action_ = tak.Tak.MoveAction.getDefaultInstance();
          }
          moveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              tak.Tak.MoveAction, tak.Tak.MoveAction.Builder, tak.Tak.MoveActionOrBuilder>(
                  (tak.Tak.MoveAction) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 4;
        onChanged();;
        return moveBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.GameTurn)
    }

    // @@protoc_insertion_point(class_scope:tak.GameTurn)
    private static final tak.Tak.GameTurn DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.GameTurn();
    }

    public static tak.Tak.GameTurn getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameTurn>
        PARSER = new com.google.protobuf.AbstractParser<GameTurn>() {
      @java.lang.Override
      public GameTurn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameTurn(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameTurn> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameTurn> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.GameTurn getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PieceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.Piece)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type of stone.
     * </pre>
     *
     * <code>.tak.PieceType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Type of stone.
     * </pre>
     *
     * <code>.tak.PieceType type = 1;</code>
     * @return The type.
     */
    tak.Tak.PieceType getType();

    /**
     * <pre>
     * Owner of the stone.
     * Conveniently, false maps to 0 (index first player), true to 1 (index second player).
     * </pre>
     *
     * <code>bool second_player_owned = 2;</code>
     * @return The secondPlayerOwned.
     */
    boolean getSecondPlayerOwned();
  }
  /**
   * <pre>
   * A piece is some stone with an owner.
   * </pre>
   *
   * Protobuf type {@code tak.Piece}
   */
  public static final class Piece extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.Piece)
      PieceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Piece.newBuilder() to construct.
    private Piece(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Piece() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Piece();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Piece(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 16: {

              secondPlayerOwned_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_Piece_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_Piece_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.Piece.class, tak.Tak.Piece.Builder.class);
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     * Type of stone.
     * </pre>
     *
     * <code>.tak.PieceType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type of stone.
     * </pre>
     *
     * <code>.tak.PieceType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public tak.Tak.PieceType getType() {
      @SuppressWarnings("deprecation")
      tak.Tak.PieceType result = tak.Tak.PieceType.valueOf(type_);
      return result == null ? tak.Tak.PieceType.UNRECOGNIZED : result;
    }

    public static final int SECOND_PLAYER_OWNED_FIELD_NUMBER = 2;
    private boolean secondPlayerOwned_;
    /**
     * <pre>
     * Owner of the stone.
     * Conveniently, false maps to 0 (index first player), true to 1 (index second player).
     * </pre>
     *
     * <code>bool second_player_owned = 2;</code>
     * @return The secondPlayerOwned.
     */
    @java.lang.Override
    public boolean getSecondPlayerOwned() {
      return secondPlayerOwned_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != tak.Tak.PieceType.FLAT_STONE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (secondPlayerOwned_ != false) {
        output.writeBool(2, secondPlayerOwned_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != tak.Tak.PieceType.FLAT_STONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (secondPlayerOwned_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, secondPlayerOwned_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.Piece)) {
        return super.equals(obj);
      }
      tak.Tak.Piece other = (tak.Tak.Piece) obj;

      if (type_ != other.type_) return false;
      if (getSecondPlayerOwned()
          != other.getSecondPlayerOwned()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + SECOND_PLAYER_OWNED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSecondPlayerOwned());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.Piece parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.Piece parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.Piece parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.Piece parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.Piece parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.Piece parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.Piece parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.Piece parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.Piece parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.Piece parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.Piece parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.Piece parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.Piece prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A piece is some stone with an owner.
     * </pre>
     *
     * Protobuf type {@code tak.Piece}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.Piece)
        tak.Tak.PieceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_Piece_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_Piece_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.Piece.class, tak.Tak.Piece.Builder.class);
      }

      // Construct using tak.Tak.Piece.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        type_ = 0;

        secondPlayerOwned_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_Piece_descriptor;
      }

      @java.lang.Override
      public tak.Tak.Piece getDefaultInstanceForType() {
        return tak.Tak.Piece.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.Piece build() {
        tak.Tak.Piece result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.Piece buildPartial() {
        tak.Tak.Piece result = new tak.Tak.Piece(this);
        result.type_ = type_;
        result.secondPlayerOwned_ = secondPlayerOwned_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.Piece) {
          return mergeFrom((tak.Tak.Piece)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.Piece other) {
        if (other == tak.Tak.Piece.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getSecondPlayerOwned() != false) {
          setSecondPlayerOwned(other.getSecondPlayerOwned());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.Piece parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.Piece) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * Type of stone.
       * </pre>
       *
       * <code>.tak.PieceType type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type of stone.
       * </pre>
       *
       * <code>.tak.PieceType type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of stone.
       * </pre>
       *
       * <code>.tak.PieceType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public tak.Tak.PieceType getType() {
        @SuppressWarnings("deprecation")
        tak.Tak.PieceType result = tak.Tak.PieceType.valueOf(type_);
        return result == null ? tak.Tak.PieceType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type of stone.
       * </pre>
       *
       * <code>.tak.PieceType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(tak.Tak.PieceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of stone.
       * </pre>
       *
       * <code>.tak.PieceType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private boolean secondPlayerOwned_ ;
      /**
       * <pre>
       * Owner of the stone.
       * Conveniently, false maps to 0 (index first player), true to 1 (index second player).
       * </pre>
       *
       * <code>bool second_player_owned = 2;</code>
       * @return The secondPlayerOwned.
       */
      @java.lang.Override
      public boolean getSecondPlayerOwned() {
        return secondPlayerOwned_;
      }
      /**
       * <pre>
       * Owner of the stone.
       * Conveniently, false maps to 0 (index first player), true to 1 (index second player).
       * </pre>
       *
       * <code>bool second_player_owned = 2;</code>
       * @param value The secondPlayerOwned to set.
       * @return This builder for chaining.
       */
      public Builder setSecondPlayerOwned(boolean value) {
        
        secondPlayerOwned_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Owner of the stone.
       * Conveniently, false maps to 0 (index first player), true to 1 (index second player).
       * </pre>
       *
       * <code>bool second_player_owned = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSecondPlayerOwned() {
        
        secondPlayerOwned_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.Piece)
    }

    // @@protoc_insertion_point(class_scope:tak.Piece)
    private static final tak.Tak.Piece DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.Piece();
    }

    public static tak.Tak.Piece getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Piece>
        PARSER = new com.google.protobuf.AbstractParser<Piece>() {
      @java.lang.Override
      public Piece parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Piece(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Piece> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Piece> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.Piece getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.Pile)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    java.util.List<tak.Tak.Piece> 
        getPiecesList();
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    tak.Tak.Piece getPieces(int index);
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    int getPiecesCount();
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    java.util.List<? extends tak.Tak.PieceOrBuilder> 
        getPiecesOrBuilderList();
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    tak.Tak.PieceOrBuilder getPiecesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A pile of stones/pieces.
   * </pre>
   *
   * Protobuf type {@code tak.Pile}
   */
  public static final class Pile extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.Pile)
      PileOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Pile.newBuilder() to construct.
    private Pile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Pile() {
      pieces_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Pile();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Pile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                pieces_ = new java.util.ArrayList<tak.Tak.Piece>();
                mutable_bitField0_ |= 0x00000001;
              }
              pieces_.add(
                  input.readMessage(tak.Tak.Piece.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          pieces_ = java.util.Collections.unmodifiableList(pieces_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_Pile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_Pile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.Pile.class, tak.Tak.Pile.Builder.class);
    }

    public static final int PIECES_FIELD_NUMBER = 1;
    private java.util.List<tak.Tak.Piece> pieces_;
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    @java.lang.Override
    public java.util.List<tak.Tak.Piece> getPiecesList() {
      return pieces_;
    }
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends tak.Tak.PieceOrBuilder> 
        getPiecesOrBuilderList() {
      return pieces_;
    }
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    @java.lang.Override
    public int getPiecesCount() {
      return pieces_.size();
    }
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    @java.lang.Override
    public tak.Tak.Piece getPieces(int index) {
      return pieces_.get(index);
    }
    /**
     * <pre>
     * List of pieces on this pile.
     * The lowest index is the stone at the bottom of the pile.
     * The highest index is the stone at the top of the pile.
     * May be empty, indicating no one owns this field.
     * </pre>
     *
     * <code>repeated .tak.Piece pieces = 1;</code>
     */
    @java.lang.Override
    public tak.Tak.PieceOrBuilder getPiecesOrBuilder(
        int index) {
      return pieces_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < pieces_.size(); i++) {
        output.writeMessage(1, pieces_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < pieces_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pieces_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.Pile)) {
        return super.equals(obj);
      }
      tak.Tak.Pile other = (tak.Tak.Pile) obj;

      if (!getPiecesList()
          .equals(other.getPiecesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPiecesCount() > 0) {
        hash = (37 * hash) + PIECES_FIELD_NUMBER;
        hash = (53 * hash) + getPiecesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.Pile parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.Pile parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.Pile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.Pile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.Pile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.Pile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.Pile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.Pile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.Pile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.Pile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.Pile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.Pile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.Pile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A pile of stones/pieces.
     * </pre>
     *
     * Protobuf type {@code tak.Pile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.Pile)
        tak.Tak.PileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_Pile_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_Pile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.Pile.class, tak.Tak.Pile.Builder.class);
      }

      // Construct using tak.Tak.Pile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPiecesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (piecesBuilder_ == null) {
          pieces_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          piecesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_Pile_descriptor;
      }

      @java.lang.Override
      public tak.Tak.Pile getDefaultInstanceForType() {
        return tak.Tak.Pile.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.Pile build() {
        tak.Tak.Pile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.Pile buildPartial() {
        tak.Tak.Pile result = new tak.Tak.Pile(this);
        int from_bitField0_ = bitField0_;
        if (piecesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            pieces_ = java.util.Collections.unmodifiableList(pieces_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pieces_ = pieces_;
        } else {
          result.pieces_ = piecesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.Pile) {
          return mergeFrom((tak.Tak.Pile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.Pile other) {
        if (other == tak.Tak.Pile.getDefaultInstance()) return this;
        if (piecesBuilder_ == null) {
          if (!other.pieces_.isEmpty()) {
            if (pieces_.isEmpty()) {
              pieces_ = other.pieces_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePiecesIsMutable();
              pieces_.addAll(other.pieces_);
            }
            onChanged();
          }
        } else {
          if (!other.pieces_.isEmpty()) {
            if (piecesBuilder_.isEmpty()) {
              piecesBuilder_.dispose();
              piecesBuilder_ = null;
              pieces_ = other.pieces_;
              bitField0_ = (bitField0_ & ~0x00000001);
              piecesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPiecesFieldBuilder() : null;
            } else {
              piecesBuilder_.addAllMessages(other.pieces_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.Pile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.Pile) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<tak.Tak.Piece> pieces_ =
        java.util.Collections.emptyList();
      private void ensurePiecesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          pieces_ = new java.util.ArrayList<tak.Tak.Piece>(pieces_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          tak.Tak.Piece, tak.Tak.Piece.Builder, tak.Tak.PieceOrBuilder> piecesBuilder_;

      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public java.util.List<tak.Tak.Piece> getPiecesList() {
        if (piecesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pieces_);
        } else {
          return piecesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public int getPiecesCount() {
        if (piecesBuilder_ == null) {
          return pieces_.size();
        } else {
          return piecesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public tak.Tak.Piece getPieces(int index) {
        if (piecesBuilder_ == null) {
          return pieces_.get(index);
        } else {
          return piecesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder setPieces(
          int index, tak.Tak.Piece value) {
        if (piecesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePiecesIsMutable();
          pieces_.set(index, value);
          onChanged();
        } else {
          piecesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder setPieces(
          int index, tak.Tak.Piece.Builder builderForValue) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.set(index, builderForValue.build());
          onChanged();
        } else {
          piecesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder addPieces(tak.Tak.Piece value) {
        if (piecesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePiecesIsMutable();
          pieces_.add(value);
          onChanged();
        } else {
          piecesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder addPieces(
          int index, tak.Tak.Piece value) {
        if (piecesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePiecesIsMutable();
          pieces_.add(index, value);
          onChanged();
        } else {
          piecesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder addPieces(
          tak.Tak.Piece.Builder builderForValue) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.add(builderForValue.build());
          onChanged();
        } else {
          piecesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder addPieces(
          int index, tak.Tak.Piece.Builder builderForValue) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.add(index, builderForValue.build());
          onChanged();
        } else {
          piecesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder addAllPieces(
          java.lang.Iterable<? extends tak.Tak.Piece> values) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, pieces_);
          onChanged();
        } else {
          piecesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder clearPieces() {
        if (piecesBuilder_ == null) {
          pieces_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          piecesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public Builder removePieces(int index) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.remove(index);
          onChanged();
        } else {
          piecesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public tak.Tak.Piece.Builder getPiecesBuilder(
          int index) {
        return getPiecesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public tak.Tak.PieceOrBuilder getPiecesOrBuilder(
          int index) {
        if (piecesBuilder_ == null) {
          return pieces_.get(index);  } else {
          return piecesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public java.util.List<? extends tak.Tak.PieceOrBuilder> 
           getPiecesOrBuilderList() {
        if (piecesBuilder_ != null) {
          return piecesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pieces_);
        }
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public tak.Tak.Piece.Builder addPiecesBuilder() {
        return getPiecesFieldBuilder().addBuilder(
            tak.Tak.Piece.getDefaultInstance());
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public tak.Tak.Piece.Builder addPiecesBuilder(
          int index) {
        return getPiecesFieldBuilder().addBuilder(
            index, tak.Tak.Piece.getDefaultInstance());
      }
      /**
       * <pre>
       * List of pieces on this pile.
       * The lowest index is the stone at the bottom of the pile.
       * The highest index is the stone at the top of the pile.
       * May be empty, indicating no one owns this field.
       * </pre>
       *
       * <code>repeated .tak.Piece pieces = 1;</code>
       */
      public java.util.List<tak.Tak.Piece.Builder> 
           getPiecesBuilderList() {
        return getPiecesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          tak.Tak.Piece, tak.Tak.Piece.Builder, tak.Tak.PieceOrBuilder> 
          getPiecesFieldBuilder() {
        if (piecesBuilder_ == null) {
          piecesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              tak.Tak.Piece, tak.Tak.Piece.Builder, tak.Tak.PieceOrBuilder>(
                  pieces_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          pieces_ = null;
        }
        return piecesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.Pile)
    }

    // @@protoc_insertion_point(class_scope:tak.Pile)
    private static final tak.Tak.Pile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.Pile();
    }

    public static tak.Tak.Pile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Pile>
        PARSER = new com.google.protobuf.AbstractParser<Pile>() {
      @java.lang.Override
      public Pile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Pile(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Pile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Pile> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.Pile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:tak.GameState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Board length of the quadratic game board. n.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     * @return The boardLength.
     */
    int getBoardLength();

    /**
     * <pre>
     * Remaining stones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 2;</code>
     * @return A list containing the remainingStones.
     */
    java.util.List<java.lang.Integer> getRemainingStonesList();
    /**
     * <pre>
     * Remaining stones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 2;</code>
     * @return The count of remainingStones.
     */
    int getRemainingStonesCount();
    /**
     * <pre>
     * Remaining stones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 2;</code>
     * @param index The index of the element to return.
     * @return The remainingStones at the given index.
     */
    int getRemainingStones(int index);

    /**
     * <pre>
     * Remaining capstones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_capstones = 3;</code>
     * @return A list containing the remainingCapstones.
     */
    java.util.List<java.lang.Integer> getRemainingCapstonesList();
    /**
     * <pre>
     * Remaining capstones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_capstones = 3;</code>
     * @return The count of remainingCapstones.
     */
    int getRemainingCapstonesCount();
    /**
     * <pre>
     * Remaining capstones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_capstones = 3;</code>
     * @param index The index of the element to return.
     * @return The remainingCapstones at the given index.
     */
    int getRemainingCapstones(int index);

    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    java.util.List<tak.Tak.Pile> 
        getBoardList();
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    tak.Tak.Pile getBoard(int index);
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    int getBoardCount();
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    java.util.List<? extends tak.Tak.PileOrBuilder> 
        getBoardOrBuilderList();
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    tak.Tak.PileOrBuilder getBoardOrBuilder(
        int index);
  }
  /**
   * <pre>
   * The GameState packet defines the current board state of the match.
   * </pre>
   *
   * Protobuf type {@code tak.GameState}
   */
  public static final class GameState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:tak.GameState)
      GameStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GameState.newBuilder() to construct.
    private GameState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GameState() {
      remainingStones_ = emptyIntList();
      remainingCapstones_ = emptyIntList();
      board_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GameState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GameState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              boardLength_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                remainingStones_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              remainingStones_.addInt(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                remainingStones_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                remainingStones_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                remainingCapstones_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              remainingCapstones_.addInt(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                remainingCapstones_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                remainingCapstones_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                board_ = new java.util.ArrayList<tak.Tak.Pile>();
                mutable_bitField0_ |= 0x00000004;
              }
              board_.add(
                  input.readMessage(tak.Tak.Pile.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          remainingStones_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          remainingCapstones_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          board_ = java.util.Collections.unmodifiableList(board_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tak.Tak.internal_static_tak_GameState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tak.Tak.internal_static_tak_GameState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tak.Tak.GameState.class, tak.Tak.GameState.Builder.class);
    }

    public static final int BOARD_LENGTH_FIELD_NUMBER = 1;
    private int boardLength_;
    /**
     * <pre>
     * Board length of the quadratic game board. n.
     * </pre>
     *
     * <code>uint32 board_length = 1;</code>
     * @return The boardLength.
     */
    @java.lang.Override
    public int getBoardLength() {
      return boardLength_;
    }

    public static final int REMAINING_STONES_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.IntList remainingStones_;
    /**
     * <pre>
     * Remaining stones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 2;</code>
     * @return A list containing the remainingStones.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRemainingStonesList() {
      return remainingStones_;
    }
    /**
     * <pre>
     * Remaining stones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 2;</code>
     * @return The count of remainingStones.
     */
    public int getRemainingStonesCount() {
      return remainingStones_.size();
    }
    /**
     * <pre>
     * Remaining stones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_stones = 2;</code>
     * @param index The index of the element to return.
     * @return The remainingStones at the given index.
     */
    public int getRemainingStones(int index) {
      return remainingStones_.getInt(index);
    }
    private int remainingStonesMemoizedSerializedSize = -1;

    public static final int REMAINING_CAPSTONES_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList remainingCapstones_;
    /**
     * <pre>
     * Remaining capstones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_capstones = 3;</code>
     * @return A list containing the remainingCapstones.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRemainingCapstonesList() {
      return remainingCapstones_;
    }
    /**
     * <pre>
     * Remaining capstones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_capstones = 3;</code>
     * @return The count of remainingCapstones.
     */
    public int getRemainingCapstonesCount() {
      return remainingCapstones_.size();
    }
    /**
     * <pre>
     * Remaining capstones of both players.
     * Index 0 is the first player, index 1 is the second player.
     * </pre>
     *
     * <code>repeated uint32 remaining_capstones = 3;</code>
     * @param index The index of the element to return.
     * @return The remainingCapstones at the given index.
     */
    public int getRemainingCapstones(int index) {
      return remainingCapstones_.getInt(index);
    }
    private int remainingCapstonesMemoizedSerializedSize = -1;

    public static final int BOARD_FIELD_NUMBER = 4;
    private java.util.List<tak.Tak.Pile> board_;
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    @java.lang.Override
    public java.util.List<tak.Tak.Pile> getBoardList() {
      return board_;
    }
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends tak.Tak.PileOrBuilder> 
        getBoardOrBuilderList() {
      return board_;
    }
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    @java.lang.Override
    public int getBoardCount() {
      return board_.size();
    }
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    @java.lang.Override
    public tak.Tak.Pile getBoard(int index) {
      return board_.get(index);
    }
    /**
     * <pre>
     * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
     * The top left of the board corresponds to position (0|0).
     * Fields are added row-wise. Index 0 is position (0|0).
     * Example:
     * - board_length := 3.
     * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
     *             Pile(0|1), Pile(1|1), Pile(2|1),
     *             Pile(0|2), Pile(1|2), Pile(2|2)]
     * </pre>
     *
     * <code>repeated .tak.Pile board = 4;</code>
     */
    @java.lang.Override
    public tak.Tak.PileOrBuilder getBoardOrBuilder(
        int index) {
      return board_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (boardLength_ != 0) {
        output.writeUInt32(1, boardLength_);
      }
      if (getRemainingStonesList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(remainingStonesMemoizedSerializedSize);
      }
      for (int i = 0; i < remainingStones_.size(); i++) {
        output.writeUInt32NoTag(remainingStones_.getInt(i));
      }
      if (getRemainingCapstonesList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(remainingCapstonesMemoizedSerializedSize);
      }
      for (int i = 0; i < remainingCapstones_.size(); i++) {
        output.writeUInt32NoTag(remainingCapstones_.getInt(i));
      }
      for (int i = 0; i < board_.size(); i++) {
        output.writeMessage(4, board_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (boardLength_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, boardLength_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < remainingStones_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(remainingStones_.getInt(i));
        }
        size += dataSize;
        if (!getRemainingStonesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        remainingStonesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < remainingCapstones_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(remainingCapstones_.getInt(i));
        }
        size += dataSize;
        if (!getRemainingCapstonesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        remainingCapstonesMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < board_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, board_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof tak.Tak.GameState)) {
        return super.equals(obj);
      }
      tak.Tak.GameState other = (tak.Tak.GameState) obj;

      if (getBoardLength()
          != other.getBoardLength()) return false;
      if (!getRemainingStonesList()
          .equals(other.getRemainingStonesList())) return false;
      if (!getRemainingCapstonesList()
          .equals(other.getRemainingCapstonesList())) return false;
      if (!getBoardList()
          .equals(other.getBoardList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BOARD_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getBoardLength();
      if (getRemainingStonesCount() > 0) {
        hash = (37 * hash) + REMAINING_STONES_FIELD_NUMBER;
        hash = (53 * hash) + getRemainingStonesList().hashCode();
      }
      if (getRemainingCapstonesCount() > 0) {
        hash = (37 * hash) + REMAINING_CAPSTONES_FIELD_NUMBER;
        hash = (53 * hash) + getRemainingCapstonesList().hashCode();
      }
      if (getBoardCount() > 0) {
        hash = (37 * hash) + BOARD_FIELD_NUMBER;
        hash = (53 * hash) + getBoardList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static tak.Tak.GameState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tak.Tak.GameState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tak.Tak.GameState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.GameState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.GameState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static tak.Tak.GameState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static tak.Tak.GameState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static tak.Tak.GameState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(tak.Tak.GameState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The GameState packet defines the current board state of the match.
     * </pre>
     *
     * Protobuf type {@code tak.GameState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:tak.GameState)
        tak.Tak.GameStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tak.Tak.internal_static_tak_GameState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tak.Tak.internal_static_tak_GameState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tak.Tak.GameState.class, tak.Tak.GameState.Builder.class);
      }

      // Construct using tak.Tak.GameState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBoardFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        boardLength_ = 0;

        remainingStones_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        remainingCapstones_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (boardBuilder_ == null) {
          board_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          boardBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tak.Tak.internal_static_tak_GameState_descriptor;
      }

      @java.lang.Override
      public tak.Tak.GameState getDefaultInstanceForType() {
        return tak.Tak.GameState.getDefaultInstance();
      }

      @java.lang.Override
      public tak.Tak.GameState build() {
        tak.Tak.GameState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public tak.Tak.GameState buildPartial() {
        tak.Tak.GameState result = new tak.Tak.GameState(this);
        int from_bitField0_ = bitField0_;
        result.boardLength_ = boardLength_;
        if (((bitField0_ & 0x00000001) != 0)) {
          remainingStones_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.remainingStones_ = remainingStones_;
        if (((bitField0_ & 0x00000002) != 0)) {
          remainingCapstones_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.remainingCapstones_ = remainingCapstones_;
        if (boardBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            board_ = java.util.Collections.unmodifiableList(board_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.board_ = board_;
        } else {
          result.board_ = boardBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tak.Tak.GameState) {
          return mergeFrom((tak.Tak.GameState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tak.Tak.GameState other) {
        if (other == tak.Tak.GameState.getDefaultInstance()) return this;
        if (other.getBoardLength() != 0) {
          setBoardLength(other.getBoardLength());
        }
        if (!other.remainingStones_.isEmpty()) {
          if (remainingStones_.isEmpty()) {
            remainingStones_ = other.remainingStones_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRemainingStonesIsMutable();
            remainingStones_.addAll(other.remainingStones_);
          }
          onChanged();
        }
        if (!other.remainingCapstones_.isEmpty()) {
          if (remainingCapstones_.isEmpty()) {
            remainingCapstones_ = other.remainingCapstones_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRemainingCapstonesIsMutable();
            remainingCapstones_.addAll(other.remainingCapstones_);
          }
          onChanged();
        }
        if (boardBuilder_ == null) {
          if (!other.board_.isEmpty()) {
            if (board_.isEmpty()) {
              board_ = other.board_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureBoardIsMutable();
              board_.addAll(other.board_);
            }
            onChanged();
          }
        } else {
          if (!other.board_.isEmpty()) {
            if (boardBuilder_.isEmpty()) {
              boardBuilder_.dispose();
              boardBuilder_ = null;
              board_ = other.board_;
              bitField0_ = (bitField0_ & ~0x00000004);
              boardBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBoardFieldBuilder() : null;
            } else {
              boardBuilder_.addAllMessages(other.board_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tak.Tak.GameState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tak.Tak.GameState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int boardLength_ ;
      /**
       * <pre>
       * Board length of the quadratic game board. n.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       * @return The boardLength.
       */
      @java.lang.Override
      public int getBoardLength() {
        return boardLength_;
      }
      /**
       * <pre>
       * Board length of the quadratic game board. n.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       * @param value The boardLength to set.
       * @return This builder for chaining.
       */
      public Builder setBoardLength(int value) {
        
        boardLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Board length of the quadratic game board. n.
       * </pre>
       *
       * <code>uint32 board_length = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoardLength() {
        
        boardLength_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList remainingStones_ = emptyIntList();
      private void ensureRemainingStonesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          remainingStones_ = mutableCopy(remainingStones_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @return A list containing the remainingStones.
       */
      public java.util.List<java.lang.Integer>
          getRemainingStonesList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(remainingStones_) : remainingStones_;
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @return The count of remainingStones.
       */
      public int getRemainingStonesCount() {
        return remainingStones_.size();
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @param index The index of the element to return.
       * @return The remainingStones at the given index.
       */
      public int getRemainingStones(int index) {
        return remainingStones_.getInt(index);
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @param index The index to set the value at.
       * @param value The remainingStones to set.
       * @return This builder for chaining.
       */
      public Builder setRemainingStones(
          int index, int value) {
        ensureRemainingStonesIsMutable();
        remainingStones_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @param value The remainingStones to add.
       * @return This builder for chaining.
       */
      public Builder addRemainingStones(int value) {
        ensureRemainingStonesIsMutable();
        remainingStones_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @param values The remainingStones to add.
       * @return This builder for chaining.
       */
      public Builder addAllRemainingStones(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRemainingStonesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, remainingStones_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining stones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_stones = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRemainingStones() {
        remainingStones_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList remainingCapstones_ = emptyIntList();
      private void ensureRemainingCapstonesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          remainingCapstones_ = mutableCopy(remainingCapstones_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @return A list containing the remainingCapstones.
       */
      public java.util.List<java.lang.Integer>
          getRemainingCapstonesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(remainingCapstones_) : remainingCapstones_;
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @return The count of remainingCapstones.
       */
      public int getRemainingCapstonesCount() {
        return remainingCapstones_.size();
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @param index The index of the element to return.
       * @return The remainingCapstones at the given index.
       */
      public int getRemainingCapstones(int index) {
        return remainingCapstones_.getInt(index);
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @param index The index to set the value at.
       * @param value The remainingCapstones to set.
       * @return This builder for chaining.
       */
      public Builder setRemainingCapstones(
          int index, int value) {
        ensureRemainingCapstonesIsMutable();
        remainingCapstones_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @param value The remainingCapstones to add.
       * @return This builder for chaining.
       */
      public Builder addRemainingCapstones(int value) {
        ensureRemainingCapstonesIsMutable();
        remainingCapstones_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @param values The remainingCapstones to add.
       * @return This builder for chaining.
       */
      public Builder addAllRemainingCapstones(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRemainingCapstonesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, remainingCapstones_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Remaining capstones of both players.
       * Index 0 is the first player, index 1 is the second player.
       * </pre>
       *
       * <code>repeated uint32 remaining_capstones = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRemainingCapstones() {
        remainingCapstones_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<tak.Tak.Pile> board_ =
        java.util.Collections.emptyList();
      private void ensureBoardIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          board_ = new java.util.ArrayList<tak.Tak.Pile>(board_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          tak.Tak.Pile, tak.Tak.Pile.Builder, tak.Tak.PileOrBuilder> boardBuilder_;

      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public java.util.List<tak.Tak.Pile> getBoardList() {
        if (boardBuilder_ == null) {
          return java.util.Collections.unmodifiableList(board_);
        } else {
          return boardBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public int getBoardCount() {
        if (boardBuilder_ == null) {
          return board_.size();
        } else {
          return boardBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public tak.Tak.Pile getBoard(int index) {
        if (boardBuilder_ == null) {
          return board_.get(index);
        } else {
          return boardBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder setBoard(
          int index, tak.Tak.Pile value) {
        if (boardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBoardIsMutable();
          board_.set(index, value);
          onChanged();
        } else {
          boardBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder setBoard(
          int index, tak.Tak.Pile.Builder builderForValue) {
        if (boardBuilder_ == null) {
          ensureBoardIsMutable();
          board_.set(index, builderForValue.build());
          onChanged();
        } else {
          boardBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder addBoard(tak.Tak.Pile value) {
        if (boardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBoardIsMutable();
          board_.add(value);
          onChanged();
        } else {
          boardBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder addBoard(
          int index, tak.Tak.Pile value) {
        if (boardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBoardIsMutable();
          board_.add(index, value);
          onChanged();
        } else {
          boardBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder addBoard(
          tak.Tak.Pile.Builder builderForValue) {
        if (boardBuilder_ == null) {
          ensureBoardIsMutable();
          board_.add(builderForValue.build());
          onChanged();
        } else {
          boardBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder addBoard(
          int index, tak.Tak.Pile.Builder builderForValue) {
        if (boardBuilder_ == null) {
          ensureBoardIsMutable();
          board_.add(index, builderForValue.build());
          onChanged();
        } else {
          boardBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder addAllBoard(
          java.lang.Iterable<? extends tak.Tak.Pile> values) {
        if (boardBuilder_ == null) {
          ensureBoardIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, board_);
          onChanged();
        } else {
          boardBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder clearBoard() {
        if (boardBuilder_ == null) {
          board_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          boardBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public Builder removeBoard(int index) {
        if (boardBuilder_ == null) {
          ensureBoardIsMutable();
          board_.remove(index);
          onChanged();
        } else {
          boardBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public tak.Tak.Pile.Builder getBoardBuilder(
          int index) {
        return getBoardFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public tak.Tak.PileOrBuilder getBoardOrBuilder(
          int index) {
        if (boardBuilder_ == null) {
          return board_.get(index);  } else {
          return boardBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public java.util.List<? extends tak.Tak.PileOrBuilder> 
           getBoardOrBuilderList() {
        if (boardBuilder_ != null) {
          return boardBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(board_);
        }
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public tak.Tak.Pile.Builder addBoardBuilder() {
        return getBoardFieldBuilder().addBuilder(
            tak.Tak.Pile.getDefaultInstance());
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public tak.Tak.Pile.Builder addBoardBuilder(
          int index) {
        return getBoardFieldBuilder().addBuilder(
            index, tak.Tak.Pile.getDefaultInstance());
      }
      /**
       * <pre>
       * Flattened list of fields (both non-/empty piles) on the board, resulting in n² fields.
       * The top left of the board corresponds to position (0|0).
       * Fields are added row-wise. Index 0 is position (0|0).
       * Example:
       * - board_length := 3.
       * - board := [Pile(0|0), Pile(1|0), Pile(2|0),
       *             Pile(0|1), Pile(1|1), Pile(2|1),
       *             Pile(0|2), Pile(1|2), Pile(2|2)]
       * </pre>
       *
       * <code>repeated .tak.Pile board = 4;</code>
       */
      public java.util.List<tak.Tak.Pile.Builder> 
           getBoardBuilderList() {
        return getBoardFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          tak.Tak.Pile, tak.Tak.Pile.Builder, tak.Tak.PileOrBuilder> 
          getBoardFieldBuilder() {
        if (boardBuilder_ == null) {
          boardBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              tak.Tak.Pile, tak.Tak.Pile.Builder, tak.Tak.PileOrBuilder>(
                  board_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          board_ = null;
        }
        return boardBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:tak.GameState)
    }

    // @@protoc_insertion_point(class_scope:tak.GameState)
    private static final tak.Tak.GameState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new tak.Tak.GameState();
    }

    public static tak.Tak.GameState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameState>
        PARSER = new com.google.protobuf.AbstractParser<GameState>() {
      @java.lang.Override
      public GameState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public tak.Tak.GameState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_GameParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_GameParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_PlaceAction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_PlaceAction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_MoveAction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_MoveAction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_GameTurn_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_GameTurn_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_Piece_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_Piece_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_Pile_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_Pile_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_tak_GameState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_tak_GameState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ttak.proto\022\003tak\"%\n\rGameParameter\022\024\n\014boa" +
      "rd_length\030\001 \001(\r\",\n\013PlaceAction\022\035\n\005piece\030" +
      "\001 \001(\0162\016.tak.PieceType\">\n\nMoveAction\022!\n\td" +
      "irection\030\001 \001(\0162\016.tak.Direction\022\r\n\005drops\030" +
      "\002 \003(\r\"n\n\010GameTurn\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022" +
      "!\n\005place\030\003 \001(\0132\020.tak.PlaceActionH\000\022\037\n\004mo" +
      "ve\030\004 \001(\0132\017.tak.MoveActionH\000B\010\n\006Action\"B\n" +
      "\005Piece\022\034\n\004type\030\001 \001(\0162\016.tak.PieceType\022\033\n\023" +
      "second_player_owned\030\002 \001(\010\"\"\n\004Pile\022\032\n\006pie" +
      "ces\030\001 \003(\0132\n.tak.Piece\"r\n\tGameState\022\024\n\014bo" +
      "ard_length\030\001 \001(\r\022\030\n\020remaining_stones\030\002 \003" +
      "(\r\022\033\n\023remaining_capstones\030\003 \003(\r\022\030\n\005board" +
      "\030\004 \003(\0132\t.tak.Pile*5\n\tDirection\022\t\n\005NORTH\020" +
      "\000\022\010\n\004EAST\020\001\022\t\n\005SOUTH\020\002\022\010\n\004WEST\020\003*=\n\tPiec" +
      "eType\022\016\n\nFLAT_STONE\020\000\022\022\n\016STANDING_STONE\020" +
      "\001\022\014\n\010CAPSTONE\020\002b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_tak_GameParameter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_tak_GameParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_GameParameter_descriptor,
        new java.lang.String[] { "BoardLength", });
    internal_static_tak_PlaceAction_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_tak_PlaceAction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_PlaceAction_descriptor,
        new java.lang.String[] { "Piece", });
    internal_static_tak_MoveAction_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_tak_MoveAction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_MoveAction_descriptor,
        new java.lang.String[] { "Direction", "Drops", });
    internal_static_tak_GameTurn_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_tak_GameTurn_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_GameTurn_descriptor,
        new java.lang.String[] { "X", "Y", "Place", "Move", "Action", });
    internal_static_tak_Piece_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_tak_Piece_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_Piece_descriptor,
        new java.lang.String[] { "Type", "SecondPlayerOwned", });
    internal_static_tak_Pile_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_tak_Pile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_Pile_descriptor,
        new java.lang.String[] { "Pieces", });
    internal_static_tak_GameState_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_tak_GameState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_tak_GameState_descriptor,
        new java.lang.String[] { "BoardLength", "RemainingStones", "RemainingCapstones", "Board", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
